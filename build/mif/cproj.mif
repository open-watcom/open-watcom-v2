# Perform basic sanity checks
!ifeq host_os #nothing
!error The host_os macro must be defined!
!endif
!ifeq host_cpu #nothing
!error The host_cpu macro must be defined!
!endif

!ifdef bldonly_$(bld_os)
!ifeq bld_cpu $(host_cpu)
!ifndef bootstrap
!undef __WATCOM_TOOLS__
!endif
!endif
!endif

###################################
# define OW build windows version for Win32 platform
# Now it is setup to 0x400
# to be OK for Windows 95 and Windows NT
#
!ifndef bootstrap
!ifdef $(proj_name)_win32ver
win32ver = $($(proj_name)_win32ver)
!else
win32ver = -DWINVER=0x400 -D_WIN32_IE=0x300
!endif
!endif

!ifdef bootstrap
objs_subdir = $(bin_subdir)
!else
objs_subdir = $(host_os)$(host_cpu)
!endif

bldver_cppflags = -D_BLDVER=$(bld_ver_tool) -D_CYEAR=$(curr_year)

!ifdef bootstrap

cc_386          = *wcc386
cc_i86          = *wcc
cc_axp          = *wccaxp
cc_ppc          = *wccppc
cc_mps          = *wccmps

cl_386          = *wcl386
cl_i86          = *wcl
cl_axp          = *wclaxp
cl_ppc          = *wclppc
cl_mps          = *wclmps

cxx_386         = *wpp386
cxx_i86         = *wpp
cxx_axp         = *wppaxp
cxx_ppc         = *wppppc
cxx_mps         = *wppmps

linker_386      = *wlink
linker_i86      = *wlink
linker_axp      = *wlink
linker_ppc      = *wlink
linker_mps      = *wlink

librarian_386   = *wlib
librarian_i86   = *wlib
librarian_axp   = *wlib
librarian_ppc   = *wlib
librarian_mps   = *wlib

as_386          = *wasm
as_i86          = *wasm
as_axp          = *wasaxp
as_ppc          = *wasppc
as_mps          = *wasmps

!else

cc_386          = *bwcc386
cc_i86          = *bwcc
cc_axp          = *bwccaxp
cc_ppc          = *bwccppc
cc_mps          = *bwccmps

cl_386          = *bwcl386
cl_i86          = *bwcl
cl_axp          = *bwclaxp
cl_ppc          = *bwclppc
cl_mps          = *bwclmps

cxx_386         = *bwpp386
cxx_i86         = *bwpp
cxx_axp         = *bwppaxp
cxx_ppc         = *bwppppc
cxx_mps         = *bwppmps

linker_386      = *bwlink
linker_i86      = *bwlink
linker_axp      = *bwlink
linker_ppc      = *bwlink
linker_mps      = *bwlink

librarian_386   = *bwlib
librarian_i86   = *bwlib
librarian_axp   = *bwlib
librarian_ppc   = *bwlib
librarian_mps   = *bwlib

as_386          = *bwasm
as_i86          = *bwasm
as_axp          = *bwasaxp
as_ppc          = *bwasppc
as_mps          = *bwasmps

!endif

!ifndef release
!ifdef $(proj_name)_release
release = $($(proj_name)_release)
!else ifeq %OWDEBUGBUILD 1
release = 0
!else
release = 1
!endif
!endif

!ifdef $(proj_name)_rtdll
!ifeq $(proj_name)_rtdll 1
sys_rtdll       = 1
!else
sys_rtdll       = 0
!endif
!endif
!ifndef sys_rtdll
sys_rtdll       = 0
!endif

!ifndef debugfmt
!ifeq codeview 1
debugfmt = codeview
!else ifeq %CODEVIEW 1
debugfmt = codeview
!else ifdef $(proj_name)_debugfmt
debugfmt = $($(proj_name)_debugfmt)
!else
debugfmt = dwarf
!endif
!endif

!ifdef $(proj_name)_nomapfile
!ifeq $(proj_name)_nomapfile 1
nomapfile   = 1
!else
nomapfile   = 0
!endif
!endif
!ifndef nomapfile
nomapfile   = 0
!endif

!ifdef $(proj_name)_dos_extender
dos_extender = $($(proj_name)_dos_extender)
!else ifndef dos_extender
dos_extender = causeway #dos4g
!endif

!ifeq debugfmt codeview
cdebug_fmt  = -hc
ldebug_fmt  = debug codeview
cldebug_fmt = -hc
!else ifeq debugfmt watcom # supported only on intel
cdebug_fmt  = -hw          # cg for axp and ppc don't use it
ldebug_fmt  = debug watcom
cldebug_fmt = -hw
!else
#cdebug_fmt  = -hd              # default format
ldebug_fmt  = debug dwarf
cldebug_fmt = -hd
!endif

!ifndef $(proj_name)_nooptimization
mode_optimization = $(dft_oflags)
!endif
mode_libflags =
!ifeq release 1
mode_cppflags = -DNDEBUG
mode_cflags   = $(mode_optimization) -d1 $(cdebug_fmt)
mode_aflags   = -d1 -DNDEBUG
mode_lflags   = $(ldebug_fmt)
mode_clflags  = $(cldebug_fmt) -d1
!ifdef $(proj_name)_distrib_lib
mode_libflags = -s-t-zld
!endif
!else
mode_cppflags =
mode_cflags   = -od -d2 $(cdebug_fmt)
mode_aflags   = -d2
mode_lflags   = $(ldebug_fmt) all
mode_clflags  = $(cldebug_fmt) -d2
!endif
mode_lflags  += op nored
!ifdef __UNIX__
mode_clflags   += -\"op nored\"
!else
mode_clflags   += -"op nored"
!endif
!ifndef bootstrap
mode_cflags  += -x-wpx
mode_clflags += -x-wpx
!endif
!ifdef __WATCOM_TOOLS__
!if $(__WATCOM_TOOLS__) >= 1300
mode_cflags  += -xx -zam
mode_clflags += -xx -zam
!endif
!endif

!ifndef $(proj_name)_nosymfile
mode_lflags    += op symfile
!ifdef __UNIX__
mode_clflags   += -\"op symf\"
!else
mode_clflags   += -"op symf"
!endif
!endif

!ifeq nomapfile 0
mode_lflags    += op map
mode_clflags   += -fm
!endif

########################
# MEMORY MODELS SETINGS
######
!ifndef model_switch_i86
!ifndef memory_model_i86
memory_model_i86 = l
!endif
model_switch_i86 = -m$(memory_model_i86)
!endif

default_memory_model_386_dos     = s
default_memory_model_386_zdos    = s
default_memory_model_386_qnx     = s
default_memory_model_386_nov     = s
default_memory_model_386_rdosdev = c
default_memory_model_386_win     = f
default_memory_model_386_os2     = f
default_memory_model_386_nt      = f
default_memory_model_386_linux   = f
default_memory_model_386_nto     = f
default_memory_model_386_rdos    = f
default_memory_model_386_        = f

!ifndef model_switch_386
!ifndef memory_model_386
memory_model_386 = $(default_memory_model_386_$(host_os))
!endif
model_switch_386 = -m$(memory_model_386)
!endif

######################
# FPU SETINGS
######
  # DOS doesn't have emulator support, but OW has it
  # must be -fpc or -fpi
def_fpu_flags_dos_i86   = -fpi
  ######
  # OS/2 ????
def_fpu_flags_os2_i86   = -fpi
  ######
  # Windows 3.x has emulator support (WIN87EM.DLL)
  # must be -fpc or -fpi, don't use -fpi87
def_fpu_flags_win_i86   = -fpi
  ######
  # QNX doesn't have emulator support, but OW has it
  # must be -fpc or -fpi
def_fpu_flags_qnx_i86   = -fpi
  ######
  # Extenders don't have emulator support
  # must be -fpc or -fpi
def_fpu_flags_dos_386   = -fpi
  ######
  # OS/2 ????
def_fpu_flags_os2_386   = -fpi
  ######
  # OW 386 Windows extender has 387 emulator support
def_fpu_flags_win_386   = -fpi
  ######
  # QNX doesn't have emulator support, but OW has it
def_fpu_flags_qnx_386   = -fpi
  ######
  # WIN32 systems have emulator support in kernel
def_fpu_flags_nt_386    = -fpi
  ######
  # LINUX has emulator support in kernel
def_fpu_flags_linux_386 = -fpi
  ######
  # NOVELL ?????
def_fpu_flags_nov_386   = -fpc
  ######
  # ZDOS doesn't have emulator support
def_fpu_flags_zdos_386  = -fpc
  ######
def_fpu_flags_nto_386   = -fpi

def_fpu_flags_rdos_386    = -fpi
def_fpu_flags_rdosdev_386 = -fpi

nofpu_flags_i86 = -fpc
nofpu_flags_386 = -fpc

!ifdef $(proj_name)_nofpu
fpu_flags = $(nofpu_flags_$(host_cpu))
!else ifdef fpu_flags_$(host_os)_$(host_cpu)
fpu_flags = $(fpu_flags_$(host_os)_$(host_cpu))
!else
fpu_flags = $(def_fpu_flags_$(host_os)_$(host_cpu))
!endif

#########################
# STACK CHECKING SETINGS
######
!ifdef nocheckstack
checkstack_386 = -s
checkstack_i86 = -s
!else ifdef checkstack
!else ifdef $(proj_name)_nocheckstack
checkstack_386 = -s
checkstack_i86 = -s
!else ifdef $(proj_name)_checkstack
!else
! ifeq release 1
checkstack_386 = -s
checkstack_i86 = -s
! else
! endif
!endif

!ifdef nocheckstack_dll
checkstack_dll_386 = -s
checkstack_dll_i86 = -s
!else ifdef checkstack_dll
!else ifdef $(proj_name)_nocheckstack_dll
checkstack_dll_386 = -s
checkstack_dll_i86 = -s
!else ifdef $(proj_name)_checkstack_dll
!else
! ifeq release 1
checkstack_dll_386 = -s
checkstack_dll_i86 = -s
! else
! endif
!endif

#######################
# PREPROCESSOR SETINGS
######
!ifndef nodoslfn
!ifndef $(proj_name)_nodoslfn
#cppflags_doslfn = -D__WATCOM_LFN__
!endif
!endif
!ifndef nodospc98
!ifndef $(proj_name)_nodospc98
#cppflags_dospc98 = -D__WATCOM_PC98__
!endif
!endif

cppflags_all    = $(mode_cppflags)
!ifdef __WATCOM_TOOLS__
cppflags_all    += -D_ENABLE_AUTODEPEND
!endif
!ifdef bootstrap
cppflags_all    += -DBOOTSTRAP
!endif

cppflags_win    = -DSTRICT
cppflags_dos    = $(cppflags_doslfn) $(cppflags_dospc98)

##########################
# C/C++ COMPILERS SETINGS
######
cflags_all      =-j-we $(mode_cflags) -fo=$@

cflags_386      = $(model_switch_$(host_cpu))
cflags_i86      = $(model_switch_$(host_cpu))
cflags_axp      =
cflags_ppc      =
cflags_mps      =

!ifndef suppress_zc
cflags_386      += -zc
!endif

cflags_nt       = -bt=nt $(win32ver)
cflags_win      = -bt=windows
cflags_os2      = -bt=os2
cflags_qnx      = -bt=qnx
cflags_dos      = -bt=dos
cflags_zdos     = -bt=zdos
cflags_rdos     = -bt=rdos -bm
cflags_rdosdev  = -bt=rdosdev -bm -zu
cflags_nov      = -bt=netware
cflags_linux    = -bt=linux

!ifeq sys_rtdll 1
cflags_rtdll_nt   = -br
cflags_rtdll_win  = -br
cflags_rtdll_os2  = -br
!endif

# generic application macros

# windowed application macros
!ifeq sys_windowed 1
#cflags_wind_nt   = -bg
#cflags_wind_win  = -bg
#cflags_wind_os2  = -bg
!endif

# DLL application macros
!ifndef suppress_bd
cflags_dll_nt   = -bd
cflags_dll_win  = -bd
cflags_dll_os2  = -bd
!endif

c_flags          =$(watcom_common_cflags)
!ifdef __WATCOM_TOOLS__
!if $(__WATCOM_TOOLS__) >= 1300
c_flags          +=-za99
!endif
!endif

cxx_flags        = $(watcom_common_cxxflags)-fzh -fzs $(extra_cxx_flags) $(extra_cxx_flags_$(host_cpu)) $(extra_cxx_flags_$(host_os))

proj_cpp_flags   = $(extra_cpp_flags) $(extra_cpp_flags_$(host_cpu)) $(extra_cpp_flags_$(host_os)) $(extra_cpp_flags_$(host_os)_$(host_cpu))
cppflags         = $(cppflags_all) $(cppflags_$(host_cpu)) $(cppflags_$(host_os)) $(proj_cpp_flags)

proj_c_flags     = $(extra_c_flags) $(extra_c_flags_$(host_cpu)) $(extra_c_flags_$(host_os)) $(extra_c_flags_$(host_os)_$(host_cpu))

cflags_gen_all   = $(cflags_all) $(fpu_flags) $(cflags_$(host_cpu)) $(cflags_$(host_os)) $(cflags_rtdll_$(host_os))

cflags_gen       = $(cflags_gen_all) $(checkstack_$(host_cpu)) $(proj_c_flags)
cflags_dll       = $(cflags_gen_all) $(checkstack_dll_$(host_cpu)) $(cflags_dll_$(host_os)) $(proj_c_flags)
cflags_wind      = $(cflags_gen_all) $(checkstack_$(host_cpu)) $(cflags_wind_$(host_os)) $(proj_c_flags)

###################################
# COMPILE AND LINK UTILITY SETINGS
######
clflags_all  = $(mode_clflags) $(model_switch_$(host_cpu)) -j

cl_fpu_flags = $(fpu_flags)

# generic application macros
clflags_nt_386      = -l=nt
clflags_nt_axp      = -l=ntaxp
clflags_nt_mps      = -l=ntmips
clflags_win_i86     = -l=windows
clflags_win_386     = -l=win386
clflags_os2_i86     = -l=os2
clflags_os2_386     = -l=os2v2
clflags_qnx_i86     = -l=qnx
clflags_qnx_386     = -l=qnx
clflags_dos_i86     = -l=dos $(clflags_doslfn_i86)
clflags_dos_386     = -l=$(dos_extender) $(clflags_doslfn_386)
clflags_zdos_386    = -l=zdos
clflags_rdos_386    = -l=rdos
clflags_rdosdev_386 = -l=rdosdev
clflags_nov_386     = -l=netware
clflags_linux_386   = -l=linux
clflags_linux_ppc   = -l=linuxppc
clflags_linux_mps   = -l=linuxmips

# windowed application macros
clflags_wind_nt_386  = -l=nt_win
clflags_wind_nt_axp  = -l=ntaxp_win
clflags_wind_nt_mps  = -l=ntmips_win
clflags_wind_os2_386 = -l=os2v2_pm
clflags_wind_os2_i86 = -l=os2_pm

# DLL application macros
!ifdef __UNIX__
clflags_dll_dos_386  = -l=causeway_dll $(clflags_doslfn_386)
!else
clflags_dll_dos_386  = -l=causeway_dll $(clflags_doslfn_386)
!endif
clflags_dll_nt_386   = -l=nt_dll
clflags_dll_nt_axp   = -l=ntaxp_dll
clflags_dll_nt_mps   = -l=ntmips_dll
clflags_dll_os2_386  = -l=os2v2_dll
clflags_dll_os2_i86  = -l=os2_dll
clflags_dll_rdos_386 = -l=rdos_dll
clflags_dll_win_i86  = -l=windows_dll

clflags_exe      = -fe=$@

proj_cl_flags    = $(extra_cl_flags)
clflags_gen_all  = $(clflags_all) $(cl_fpu_flags) $(cflags_$(host_os)) $(clflags_exe)

clflags_gen      = $(clflags_gen_all) $(checkstack_$(host_cpu)) $(clflags_$(host_os)_$(host_cpu)) $(proj_cl_flags)

!ifdef clflags_dll_$(host_os)_$(host_cpu)
clflags_dll      = $(clflags_gen_all) $(checkstack_dll_$(host_cpu)) $(clflags_dll_$(host_os)_$(host_cpu)) $(proj_cl_flags)
!else
clflags_dll      = $(clflags_gen_all) $(checkstack_dll_$(host_cpu)) $(clflags_$(host_os)_$(host_cpu)) $(proj_cl_flags)
!endif

!ifdef clflags_wind_$(host_os)_$(host_cpu)
clflags_wind     = $(clflags_gen_all) $(checkstack_$(host_cpu)) $(clflags_wind_$(host_os)_$(host_cpu)) $(proj_cl_flags)
!else
clflags_wind     = $(clflags_gen_all) $(checkstack_$(host_cpu)) $(clflags_$(host_os)_$(host_cpu)) $(proj_cl_flags)
!endif

#####################
# ASSEMBLERS SETINGS
######
aflags_all      = -we $(mode_aflags) -fo=$@

aflags_intel    = -w8-cx

aflags_386      = $(aflags_intel)-3
aflags_i86      = $(aflags_intel)
aflags_axp      =
aflags_ppc      =
aflags_mps      =

aflags_nt       = -bt=nt
aflags_win      = -bt=windows
aflags_os2      = -bt=os2
aflags_qnx      = -bt=qnx
aflags_dos      = -bt=dos
aflags_zdos     = -bt=zdos
aflags_rdos     = -bt=rdos
aflags_rdosdev  = -bt=rdosdev
aflags_nov      = -bt=netware
aflags_linux    = -bt=linux

aflags_nt_axp    = -oc
aflags_nt_mps    = -oc
aflags_nt_ppc    = -oc
aflags_os2_ppc   = -oe
aflags_linux_mps = -oe
aflags_linux_ppc = -oe

proj_a_flags     = $(extra_a_flags) $(extra_a_flags_$(host_cpu)) $(extra_a_flags_$(host_os))
aflags           = $(aflags_all) $(aflags_$(host_cpu)) $(aflags_$(host_os)) $(aflags_$(host_os)_$(host_cpu)) $(proj_a_flags)

#####################
# LINKER SETINGS
######

!ifndef nodoslfn
!ifndef $(proj_name)_nodoslfn
#lflags_doslfn_i86   = lib doslfn$(memory_model_i86).lib
#lflags_doslfn_386   = lib doslfn3r.lib
!endif
!endif

# generic application macros
lflags_dos_386      = sys $(dos_extender) $(lflags_doslfn_386)
lflags_dos_i86      = sys dos $(lflags_doslfn_i86)
lflags_linux_386    = sys linux
lflags_linux_mps    = sys linuxmips
lflags_linux_ppc    = sys linuxppc
lflags_nov_386      = sys novell
lflags_nt_386       = sys nt
lflags_nt_axp       = sys ntaxp
lflags_nt_mps       = sys ntmips
lflags_os2_386      = sys os2v2
lflags_os2_i86      = sys os2 pmc
lflags_qnx_386      = sys qnx386 flat
lflags_qnx_i86      = sys qnx
lflags_rdos_386     = sys rdos
lflags_rdosdev_386  = sys rdosdev
lflags_win_386      = sys win386
lflags_win_i86      = sys windows
lflags_zdos_386     = sys zdos

# windowed application macros
lflags_wind_nt_386   = sys nt_win
lflags_wind_nt_axp   = sys ntaxp_win
lflags_wind_nt_mps   = sys ntmips_win
lflags_wind_os2_386  = sys os2v2_pm
lflags_wind_os2_i86  = sys os2_pm

# DLL application macros
lflags_dll_dos_386     = sys causeway_dll $(lflags_doslfn_386)
lflags_dll_dos_i86     = $(lflags_dos_i86)
lflags_dll_linux_386   = $(lflags_linux_386)
lflags_dll_linux_mps   = $(lflags_linux_mps)
lflags_dll_linux_ppc   = $(lflags_linux_ppc)
lflags_dll_nov_386     = $(lflags_nov_386)
lflags_dll_nt_386      = sys nt_dll
lflags_dll_nt_axp      = sys ntaxp_dll
lflags_dll_nt_mps      = sys ntmips_dll
lflags_dll_os2_386     = sys os2v2_dll
lflags_dll_os2_i86     = sys os2_dll
lflags_dll_qnx_386     = $(lflags_qnx_386)
lflags_dll_qnx_i86     = $(lflags_qnx_i86)
lflags_dll_rdos_386    = sys rdos_dll
lflags_dll_rdosdev_386 = $(lflags_rdosdev_386)
lflags_dll_win_386     = $(lflags_win_386)
lflags_dll_win_i86     = sys windows_dll
lflags_dll_zdos_386    = $(lflags_zdos_386)

proj_l_flags     = $(extra_l_flags_$(host_os)) $(extra_l_flags_$(host_os)_$(host_cpu)) $(extra_l_flags)
proj_l_flags_dll = $(extra_l_flags_dll_$(host_os)) $(extra_l_flags_dll_$(host_os)_$(host_cpu)) $(extra_l_flags_dll)

lflags_gen       = $(mode_lflags) $(lflags_$(host_os)_$(host_cpu)) $(proj_l_flags)

lflags_dll       = $(mode_lflags) $(lflags_dll_$(host_os)_$(host_cpu)) $(proj_l_flags_dll)

!ifdef lflags_wind_$(host_os)_$(host_cpu)
lflags_wind      = $(mode_lflags) $(lflags_wind_$(host_os)_$(host_cpu)) $(proj_l_flags)
!else
lflags_wind      = $(lflags_gen)
!endif

#####################
# LIBRARIAN SETINGS
######
libflags_386    = -ii
libflags_i86    = -ii
libflags_ppc    = -ip
libflags_axp    = -ia
libflags_mps    = -im
libflags_x64    = -i6

libflags_dos       = -io
libflags_nov       = -io
libflags_linux_386 = -io
libflags_linux_ppc = -ie
libflags_linux_x64 = -ie
libflags_nt_386    = -io
libflags_nt_axp    = -ic
libflags_nt_mps    = -ic
libflags_nt_ppc    = -ic
libflags_nt_x64    = -ic
libflags_os2       = -io
libflags_qnx       = -io
libflags_rdos      = -io
libflags_rdosdev   = -io
libflags_win       = -io
libflags_zdos      = -io

proj_lib_flags  = $(extra_lib_flags) $(extra_lib_flags_$(host_cpu))

libflags_all    = -b-c-n-pa $(mode_libflags)
libflags        =  $(libflags_all) $(libflags_$(host_cpu)) $(libflags_$(host_os)) $(libflags_$(host_os)_$(host_cpu)) $(proj_lib_flags) $@

##############################
# INCLUDE DIRECTORIES SETINGS
######
# For bootstrap builds, include path configuration is compiler specific
!ifdef bootstrap

inc_dirs_sys_nt    =
inc_dirs_sys_win   =
inc_dirs_sys_os2   =
inc_dirs_sys_dos   =
inc_dirs_sys_nov   =
inc_dirs_sys_qnx   =
inc_dirs_sys_linux =
inc_dirs_sys_nto   =
inc_dirs_sys_rdos  =
inc_dirs_sys_rdosdev =
inc_dirs_sys_zdos  =

inc_dirs_lang_dos  =

!else

inc_dirs_sys_os2_386 = -I"$(os2api_dir)/os2386/h"
inc_dirs_sys_os2_i86 = -I"$(os2api_dir)/os2286/h"
inc_dirs_sys_os2_ppc = -I"$(%WATCOM)/h/os2ppc"
inc_dirs_sys_os2     = $(inc_dirs_sys_os2_$(host_cpu))
inc_dirs_sys_nt      = -I"$(w32api_dir)/nt/h"
inc_dirs_sys_win     = -I"$(w16api_dir)/wini86/h"
inc_dirs_sys_dos     =
inc_dirs_sys_nov     =
inc_dirs_sys_qnx     =
inc_dirs_sys_linux   =
inc_dirs_sys_nto     =
inc_dirs_sys_rdos    =
inc_dirs_sys_rdosdev =
inc_dirs_sys_zdos    = -I"$(hdr_dir)/dos/zdos"

inc_dirs_lang_dos     = -I"$(hdr_dir)/dos/h"
inc_dirs_lang_qnx     = -I"$(hdr_dir)/qnx/h"
inc_dirs_lang_linux   = -I"$(hdr_dir)/linux/h"
inc_dirs_lang_nto     = -I"$(hdr_dir)/nto"
inc_dirs_lang_rdos    = -I"$(hdr_dir)/rdos/h"
inc_dirs_lang_netware = -I"$(nwoss_dir)/common/h"

!endif

# Include path macros:
#
# $(inc_dirs_sys_$(host_os)) contains OS specific headers typically
# delivered by OS vendor. This is used for OS/2 and Windows
#
# $(inc_dirs_lang) contains headers delivered with the compiler.
#
# $(inc_dirs_sys) combines the above two macros.
#
# $(inc_path) is used in actual build rules. It adds path to the
# src/watcom/h directory plus macros $(inc_dirs) and $(inc_dirs_$(host_os))
# which individual projects are free to define as needed.

inc_dirs_all    = $(inc_dirs_trmem) -I"$(watcom_dir)/h"

!ifdef inc_dirs_lang_$(host_os)
inc_dirs_lang   = $(inc_dirs_lang_$(host_os))
!else
inc_dirs_lang   = $(inc_dirs_lang_dos)
!endif

inc_dirs_sys    = $(inc_dirs_lang) $(inc_dirs_sys_$(host_os))

!ifdef __WATCOM_TOOLS__
inc_path        = $(inc_dirs) $(inc_dirs_$(host_os)) $(inc_dirs_sys) $(inc_dirs_all)
!else
inc_path        = $(inc_dirs) $(inc_dirs_$(host_os)) $(inc_dirs_all)
!endif

############################
# RESOURCE COMPILER SETINGS
######
rc_cpp_bsd      = -D__UNIX__ -D__BSD__
rc_cpp_dos      = -D__DOS__
rc_cpp_linux    = -D__UNIX__ -D__LINUX__
rc_cpp_nov      = -D__NETWARE__
rc_cpp_nt       = -D__NT__ -D_WIN32
rc_cpp_os2      = -D__OS2__
rc_cpp_osx      = -D__UNIX__ -D__OSX__
rc_cpp_qnx      = -D__UNIX__ -D__QNX__
rc_cpp_win      = -D__WINDOWS__

rc_cpp_386      = -D_M_IX86
rc_cpp_axp      = -D__AXP__
rc_cpp_i86      = -D_M_I86
rc_cpp_mps      = -D__MIPS__
rc_cpp_ppc      = -D__PPC__
rc_cpp_x64      = -D_M_X64

rc_cppflags     = $(rc_cpp_$(host_os)) $(rc_cpp_$(host_cpu))

rc_flags_all    = -xb -r

rc_flags_nt     = -bt=nt $(win32ver)
rc_flags_win    = -bt=windows
rc_flags_os2    = -bt=os2

proj_rc_flags   = $(extra_rc_flags) $(extra_rc_flags_$(host_os))

rc_flags        = $(rc_flags_all) $(rc_flags_$(host_os)) $(rc_cppflags) $(proj_rc_flags)

rc_ui_encoding  = -zk0

!ifdef rcui8_utf8_$(host_os)
rc_ui8_encoding = -zku8
!else
rc_ui8_encoding = -zku0
!endif

rc_ui_flags     = $(rc_ui_encoding) $(rc_cppflags)
rc_ui8_flags    = $(rc_ui8_encoding) $(rc_cppflags)

#
# Include path macros:
#

rc_inc_dirs_all = -I"$(watcom_dir)/h"

!ifdef __WATCOM_TOOLS__
rc_inc_path     = $(rc_inc_dirs) $(rc_inc_dirs_$(host_os)) $(inc_dirs_sys) $(rc_inc_dirs_all)
!else
rc_inc_path     = $(rc_inc_dirs) $(rc_inc_dirs_$(host_os)) $(rc_inc_dirs_all)
!endif

rc_ui_inc_path  = $(rcui_inc_dirs) $(rcui_inc_dirs_$(host_os)) $(inc_dirs_sys_win) $(rc_inc_dirs_all)

#
# special RC invoke macros:
#

!ifdef bootstrap
rcui            = $(rc_ui) $(rc_flags_all) -bt=windows $(rc_ui_flags) $[@ -fo=$@ $(rc_ui_inc_path)
!else ifndef __WATCOM_TOOLS__
rcui            = $(rc_ui) $(rc_flags_all) -bt=windows $(rc_ui_flags) $[@ -fo=$@ $(rc_ui_inc_path)
!else
rcui            = $(rc_ui) $(rc_flags_all) -x -bt=windows $(rc_ui_flags) $[@ -fo=$@ $(rc_ui_inc_path)
!endif

!ifdef bootstrap
rcui8           = $(rc_ui) $(rc_flags_all) -bt=windows $(rc_ui8_flags) $[@ -fo=$@ $(rc_ui_inc_path)
!else ifndef __WATCOM_TOOLS__
rcui8           = $(rc_ui) $(rc_flags_all) -bt=windows $(rc_ui8_flags) $[@ -fo=$@ $(rc_ui_inc_path)
!else
rcui8           = $(rc_ui) $(rc_flags_all) -x -bt=windows $(rc_ui8_flags) $[@ -fo=$@ $(rc_ui_inc_path)
!endif

rcbnd           = $(rc_bnd) -k

#####################################
# GLOBAL MACROS SETINGS FOR OW TOOLS
#####################################
# output format setup for RISC architecture
cc_outfmt_ntaxp	   = -eoc
cc_outfmt_ntmps	   = -eoc
cc_outfmt_ntppc	   = -eoc
cc_outfmt_linuxaxp = -eoe
cc_outfmt_linuxmps = -eoe
cc_outfmt_linuxppc = -eoe
as_outfmt_ntaxp	   = -oc
as_outfmt_ntmps	   = -oc
as_outfmt_ntppc	   = -oc
as_outfmt_linuxaxp = -oe
as_outfmt_linuxmps = -oe
as_outfmt_linuxppc = -oe
######
cc              = $(noecho)$(cc_$(host_cpu)) -zq $(bldver_cppflags) $(cc_outfmt_$(host_os)$(host_cpu))
cl              = $(noecho)$(cl_$(host_cpu)) -zq $(bldver_cppflags)
cxx             = $(noecho)$(cxx_$(host_cpu)) -zq $(bldver_cppflags)
linker          = $(noecho)$(linker_$(host_cpu)) op q
librarian       = $(noecho)$(librarian_$(host_cpu)) -q
as              = $(noecho)$(as_$(host_cpu)) -q $(bldver_cppflags) $(as_outfmt_$(host_os)$(host_cpu))

rc              = $(noecho)*bwrc -q $(bldver_cppflags)
rc_ui           = $(noecho)*bwrc -q $(bldver_cppflags)
rc_bnd          = $(noecho)*bwrc -q

# current project setup
!ifeq sys_dll 1
cflags  = $(cflags_dll)
clflags = $(clflags_dll)
lflags  = $(lflags_dll)
!else ifeq sys_windowed 1
cflags  = $(cflags_wind)
clflags = $(clflags_wind)
lflags  = $(lflags_wind)
!else
cflags  = $(cflags_gen)
clflags = $(clflags_gen)
lflags  = $(lflags_gen)
!endif

# options for include source code file
incl_file_opts  = -fi

!include bhost.mif
!include local.mif
