##############################################################################
#
# HANDLING OF NON-WATCOM COMPILERS/PLATFORMS
#
##############################################################################
#
# x64 CPU (64-bit)
#
##################################
# use native tools for x64 cpu
# skip build for unsupported platforms
!ifeq host_cpu x64
! ifneq bld_cpu x64
skip_build: .SYMBOLIC
! else ifndef bldonly_$(host_os)
skip_build: .SYMBOLIC
! endif
##################################
#
# arm CPU (32-bit)
#
##################################
# use native tools for arm cpu
# skip build for unsupported platforms
!else ifeq host_cpu arm
! ifneq bld_cpu arm
skip_build: .SYMBOLIC
! else ifndef bldonly_$(host_os)
skip_build: .SYMBOLIC
! endif
##################################
#
# arm CPU (64-bit)
#
##################################
# use native tools for a64 cpu
# skip build for unsupported platforms
!else ifeq host_cpu a64
! ifneq bld_cpu a64
skip_build: .SYMBOLIC
! else ifndef bldonly_$(host_os)
skip_build: .SYMBOLIC
! endif
##################################
#
# others
#
##################################
!else
!endif
##############################################################################

# bootstrap overrides
######################

!ifdef bootstrap
!ifdef __WATCOM_TOOLS__
!ifdef __LOADDLL__
!loaddll wcc    wccd.dll
!loaddll wcc386 wccd386.dll
!loaddll wccaxp wccdaxp.dll
!loaddll wlib   wlibd.dll
!loaddll wlink  wlinkd.dll
!loaddll wpp    wppdi86.dll
!loaddll wpp386 wppd386.dll
!loaddll wppaxp wppdaxp.dll
!loaddll wrc    wrcd.dll
!endif
!endif
!endif

##############################################################################
#
# definitions for VISUALC and INTEL toolchains
#
##############################################################################
!if defined("__MSVC_TOOLS__") || defined("__INTEL_TOOLS__")

!if defined("__NT__")

!if !defined( "__WATCOM_TOOLS__" ) || "$(bld_cpu)" == "x64"

additional_clean_sys = *.pdb

# librarian settings
############################
!ifdef __INTEL_TOOLS__
bld_lib = $(noecho)xilib -nologo -out:$@
!else
bld_lib = $(noecho)lib -nologo -out:$@
!endif

# common settings
############################
common_cppflags = -D__FLAT__

common_cppflags_nt  = -D__NT__

common_cppflags_386 = -D__386__
common_cppflags_x64 =

common_cppflags_nt_386  = -D__NT_386__
common_cppflags_nt_x64  = -D__NT_X64__

# common release/debug options
!ifdef __INTEL_TOOLS__
common_flags_rel = -Ox -Zi -fast
common_flags_dbg = -Zi -fast
!else
common_flags_rel = -Ox -Zi
common_flags_dbg = -Zi
!endif
!ifeq debug 0
common_flags = $(common_flags_rel)
!else
common_flags = $(common_flags_dbg)
!endif

# -wd4068 "unknown pragma"
# -wd4102 "unreferenced label"
# -wd4127 "conditional expression is constant"
# -wd4214 "bit field types other than int"
# -wd4244 "conversion ....., possible loss of data"
# -wd4306 "type cast: conversion ...... of greater size"
# -wd4702 "unreachable code"
#common_cflags_wng = -wd4068 -wd4102 -wd4127 -wd4214 -wd4244 -wd4306 -wd4702
common_cflags_wng = -W4 -wd4214
common_cflags = $(common_cflags_wng) -D_STATIC_CPPLIB

common_ldflags_rel =
common_ldflags_dbg =
!ifeq debug 0
common_ldflags = $(common_ldflags_rel)
!else
common_ldflags = $(common_ldflags_dbg)
!endif

# Options for building Executable
!ifdef bootstrap
common_cflags_exe  =
common_clflags_exe =
!else
common_cflags_exe  =
common_clflags_exe =
!endif

# Options for building DLLs
common_cflags_lib_shared  = -LD
common_clflags_lib_shared = -LD

# Target specific options
target_cflags_386   =
target_cflags_x64   =

# DLL/shared library file extension
ext_lib_shared = .dll

# extra objects for linking via cl
cl_extra_objs_gen =
cl_extra_objs_dll =
!ifeq bld_cpu x64
cl_extra_libs_gen = $(watcom_dir)/$(host_os)x64/clibext.lib
cl_extra_libs_dll = $(watcom_dir)/$(host_os)x64/clibexts.lib
!else
cl_extra_libs_gen = $(watcom_dir)/$(bin_subdir)/clibext.lib
cl_extra_libs_dll = $(watcom_dir)/$(bin_subdir)/clibexts.lib
!endif

!ifeq sys_dll 1
cl_extra_objs = $(cl_extra_objs_dll)
cl_extra_libs = $(cl_extra_libs_dll)
!else
cl_extra_objs = $(cl_extra_objs_gen)
cl_extra_libs = $(cl_extra_libs_gen)
!endif

# bld settings
############################
!ifdef __INTEL_TOOLS__
bcc  = icl -nologo -c $(ppflags_bldver)
bcxx = icl -nologo -c $(ppflags_bldver)
bccl = $(noecho)icl -nologo $(ppflags_bldver)
bcl  = $(noecho)icl -nologo
!else
bcc  = cl -nologo -c $(ppflags_bldver)
bcxx = cl -nologo -c $(ppflags_bldver)
bccl = $(noecho)cl -nologo $(ppflags_bldver)
bcl  = $(noecho)cl -nologo
!endif

# extra objects for linking via cl
bld_cl_extra_objs_gen =
bld_cl_extra_objs_dll =
bld_cl_extra_libs_gen = $(watcom_dir)/$(bin_subdir)/clibext.lib
bld_cl_extra_libs_dll = $(watcom_dir)/$(bin_subdir)/clibexts.lib

!ifeq sys_dll 1
bld_cl_extra_objs = $(bld_cl_extra_objs_dll)
bld_cl_extra_libs = $(bld_cl_extra_libs_dll)
!else
bld_cl_extra_objs = $(bld_cl_extra_objs_gen)
bld_cl_extra_libs = $(bld_cl_extra_libs_gen)
!endif

bld_cc_sys = -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS
bld_cl_sys =

bld_incs = $(bld_extra_incs) -I"$(watcom_dir)/h"

bld_cppflags = $(common_cppflags) $(common_cppflags_$(bld_os)) $(common_cppflags_$(bld_cpu)) $(common_cppflags_$(bld_os)_$(bld_cpu))

bld_cflags   = $(common_cflags) $(common_flags) -Fo$@

bld_c_flags   =
bld_cxx_flags = -EHsc

bld_ldflags1 = $(common_ldflags) -Fm

bld_ldflags  =  $(bld_cl_extra_libs_gen) -link -nologo &
    -MAPINFO:EXPORTS -INCREMENTAL:NO -DEFAULTLIB:user32.lib -DEFAULTLIB:ole32.lib &
    -DEFAULTLIB:advapi32.lib -DEFAULTLIB:shell32.lib -DEFAULTLIB:gdi32.lib -DEFAULTLIB:comdlg32.lib &
    -NODEFAULTLIB:libucrt.lib -DEFAULTLIB:ucrt.lib &
    $(bld_extra_ldflags) $(bld_ldflags_$(proj_type))

# options for linking via cl
bld_cclflags = $(bld_cppflags) $(common_cflags) $(common_flags) -Fe$@ $(bld_ldflags1)
bld_clflags  = -Fe$@ $(bld_ldflags1)

!ifndef __WATCOM_TOOLS__

# standard settings
############################
!ifdef __INTEL_TOOLS__
cc  = $(noecho)icl -nologo -c $(ppflags_bldver)
cxx = $(noecho)icl -nologo -c $(ppflags_bldver)
cl  = $(noecho)icl -nologo $(ppflags_bldver)
!else
cc   = $(noecho)cl -nologo -c $(ppflags_bldver)
cxx  = $(noecho)cl -nologo -c $(ppflags_bldver)
cl   = $(noecho)cl -nologo $(ppflags_bldver)
!endif

cppflags_nt  = $(common_cppflags) $(common_cppflags_nt)
cppflags_osi = $(common_cppflags) $(common_cppflags_$(host_os))

cppflags_386 = $(common_cppflags_386) $(common_cppflags_$(host_os)_386)
!ifdef bootstrap
cppflags_x64 = $(common_cppflags_x64) $(common_cppflags_$(host_os)_x64)
!else
cppflags_x64 = $(common_cppflags_x64) $(common_cppflags_$(host_os)_x64) -D_WIN32_WINNT=_WIN32_WINNT_WIN7
!endif

c_flags   =
cxx_flags = -EHsc

cflags_gen  = $(bld_cc_sys) $(common_cflags) $(target_cflags_$(bld_cpu)) $(common_flags) $(common_cflags_exe) -Fo$@
cflags_dll  = $(bld_cc_sys) $(common_cflags) $(target_cflags_$(bld_cpu)) $(common_flags) $(common_cflags_lib_shared) -Fo$@
cflags_wind = $(cflags_gen)

# options for linking
ldflags1 = $(common_ldflags) -Fm

ldflags_gen_all  = -link -nologo &
    -INCREMENTAL:NO -DEFAULTLIB:user32.lib -DEFAULTLIB:ole32.lib -DEFAULTLIB:advapi32.lib &
    -DEFAULTLIB:shell32.lib -DEFAULTLIB:gdi32.lib -DEFAULTLIB:comdlg32.lib &
    -NODEFAULTLIB:libucrt.lib -DEFAULTLIB:ucrt.lib

ldflags_gen  = $(cl_extra_libs_gen) $(ldflags_gen_all) $(extra_ldflags) $(bld_ldflags_$(proj_type))
ldflags_dll  = $(cl_extra_libs_dll) $(ldflags_gen_all) $(extra_ldflags_dll) $(bld_ldflags_dll_$(proj_type))
ldflags_wind = $(cl_extra_libs_gen) $(ldflags_gen_all) -SUBSYSTEM:WINDOWS $(extra_ldflags) $(bld_ldflags_$(proj_type))

!ifeq sys_dll 1
ldflags = $(ldflags_dll)
!else ifeq sys_windowed 1
ldflags = $(ldflags_wind)
!else
ldflags = $(ldflags_gen)
!endif

# options for linking by cl
clflags_gen  = $(bld_cl_sys) $(common_flags) $(common_clflags_exe) -Fe$@ $(ldflags1)
clflags_dll  = $(bld_cl_sys) $(common_flags) $(common_clflags_lib_shared) -Fe$@ $(ldflags1)
clflags_wind = $(clflags_gen)

# options for include source code file
incl_file_opts = -FI

!endif
!endif

!else
!error "OS is unsupported by OW build system for this toolchain"
!endif

##############################################################################
#
# definitions for CLANG and GCC toolchain
#
##############################################################################
!else if defined("__CLANG_TOOLS__") || defined("__GCC_TOOLS__")

!if defined("__LINUX__") || defined("__BSD__") || defined("__HAIKU__") || defined("__OSX__")

!ifdef __LINUX__
! if !defined( "__WATCOM_TOOLS__" ) || "$(bld_cpu)" == "x64" || "$(bld_cpu)" == "arm" || "$(bld_cpu)" == "a64"
use_for_build = 1
! endif
!else ifdef __BSD__
use_for_build = 1
!else ifdef __HAIKU__
use_for_build = 1
!else ifdef __OSX__
use_for_build = 1
!endif

!ifdef use_for_build

# librarian settings
############################
bld_lib = $(noecho)ar crs $@

# common settings
############################
common_cppflags         = -D__UNIX__ -D__FLAT__

common_cppflags_linux   = -D__LINUX__
common_cppflags_bsd     = -D__BSD__
common_cppflags_haiku   = -D__HAIKU__
common_cppflags_osx     = -D__OSX__

common_cppflags_386     = -D_M_IX86 -D__386__
common_cppflags_x64     = -D_M_X64
common_cppflags_ppc     = -D__PPC__
common_cppflags_mps     = -D__MIPS__ -Umips
common_cppflags_arm     = -D_M_ARM
common_cppflags_a64     = -D_M_ARM64

common_cppflags_linux_386   = -D__LINUX_386__
common_cppflags_linux_x64   = -D__LINUX_X64__
common_cppflags_linux_ppc   =
common_cppflags_linux_mps   =
common_cppflags_linux_arm   = -D__LINUX_ARM__
common_cppflags_linux_a64   = -D__LINUX_ARM64__

common_cppflags_bsd_386     = -D__BSD_386__
common_cppflags_bsd_x64     = -D__BSD_X64__
common_cppflags_bsd_ppc     =

common_cppflags_haiku_386   = -D__HAIKU_386__
common_cppflags_haiku_x64   = -D__HAIKU_X64__
common_cppflags_haiku_ppc   =

common_cppflags_osx_386     = -D__OSX_386__
common_cppflags_osx_x64     = -D__OSX_X64__
common_cppflags_osx_ppc     =
common_cppflags_osx_arm     = -D__OSX_ARM__
common_cppflags_osx_a64     = -D__OSX_ARM64__

# common release/debug options
common_flags_rel = -O -g1 -gdwarf-2
common_flags_dbg = -g -gdwarf
# common debug info compression options
!ifdef __CLANG_TOOLS__
common_flags_compr = -gz
!else
! ifdef __OSX__
! else
common_flags_compr = -gz
! endif
!endif

!ifeq debug 0
common_flags = $(common_flags_rel) $(common_flags_compr)
!else
common_flags = $(common_flags_dbg) $(common_flags_compr)
!endif

# Warning flags: all enabled except the ones that have no use besides annoy people
!ifdef __CLANG_TOOLS__
common_cflags_wng = -Wall -Wno-switch -Wno-missing-braces -Wno-parentheses -Wno-pragma-pack -Wno-implicit-exception-spec-mismatch -ferror-limit=200
!else
common_cflags_wng = -Wall -Wno-switch -Wno-missing-braces -Wno-parentheses
!endif
common_cflags = $(common_cflags_wng)

common_ldflags_rel =
common_ldflags_dbg =
!ifeq debug 0
common_ldflags = $(common_ldflags_rel)
!else
common_ldflags = $(common_ldflags_dbg)
!endif

# Options for building Executable
!ifdef bootstrap
common_cflags_exe  =
common_clflags_exe =
!else ifeq host_os osx
common_cflags_exe  =
common_clflags_exe =
!else
common_cflags_exe  = -static
common_clflags_exe = -static
!endif

# Options for building DLLs
common_cflags_lib_shared  = -fPIC
common_clflags_lib_shared = -shared

# Target specific options
target_cflags_386   =
!ifdef bootstrap
target_cflags_x64   =
!else
target_cflags_x64   =
#target_cflags_x64   = -march=core2 -msse2
!endif
target_cflags_ppc   =
target_cflags_mps   =
target_cflags_arm   =
target_cflags_a64   =

# DLL/shared library file extension
ext_lib_shared = .so

# extra objects for linking via cl
cl_extra_objs_gen =
cl_extra_objs_dll =
!ifeq bld_cpu x64
cl_extra_libs_gen = $(watcom_dir)/$(host_os)x64/clibext.lib
cl_extra_libs_dll = $(watcom_dir)/$(host_os)x64/clibexts.lib
!else
cl_extra_libs_gen = $(watcom_dir)/$(bin_subdir)/clibext.lib
cl_extra_libs_dll = $(watcom_dir)/$(bin_subdir)/clibexts.lib
!endif

!ifeq sys_dll 1
cl_extra_objs = $(cl_extra_objs_dll)
cl_extra_libs = $(cl_extra_libs_dll)
!else
cl_extra_objs = $(cl_extra_objs_gen)
cl_extra_libs = $(cl_extra_libs_gen)
!endif

# bld settings
############################
!ifdef __CLANG_TOOLS__
bcc  = clang -pipe -c $(ppflags_bldver)
bcxx = clang++ -pipe -c $(ppflags_bldver)
bccl = $(noecho)clang -pipe $(ppflags_bldver)
bcl  = $(noecho)clang -pipe
!else
bcc  = gcc -pipe -c $(ppflags_bldver)
bcxx = g++ -pipe -c $(ppflags_bldver)
bccl = $(noecho)gcc -pipe $(ppflags_bldver)
bcl  = $(noecho)gcc -pipe
!endif

bld_cl_extra_objs_gen =
bld_cl_extra_objs_dll =
bld_cl_extra_libs_gen = $(watcom_dir)/$(bin_subdir)/clibext.lib
bld_cl_extra_libs_dll = $(watcom_dir)/$(bin_subdir)/clibexts.lib

!ifeq sys_dll 1
bld_cl_extra_objs = $(bld_cl_extra_objs_dll)
bld_cl_extra_libs = $(bld_cl_extra_libs_dll)
!else
bld_cl_extra_objs = $(bld_cl_extra_objs_gen)
bld_cl_extra_libs = $(bld_cl_extra_libs_gen)
!endif

bld_cc_sys = -fno-asm -fno-common -fsigned-char
bld_cl_sys =

bld_incs = $(bld_extra_incs) -I"$(watcom_dir)/h"

bld_cppflags = $(common_cppflags) $(common_cppflags_$(bld_os)) $(common_cppflags_$(bld_cpu)) $(common_cppflags_$(bld_os)_$(bld_cpu))

bld_cflags   = $(common_cflags) $(common_flags) -o $@

bld_c_flags   =
bld_cxx_flags = -std=c++98

# options for linking
!ifdef __OSX__
bld_ldflags_cxx = -lc++
bld_ldflags_dll_cxx = -lc++
!else ifdef __CLANG_TOOLS__
bld_ldflags_cxx = -lstdc++
bld_ldflags_dll_cxx = -lstdc++
!else ifdef __GCC_TOOLS__
! if $(__GCC_TOOLS__) < 7
bld_ldflags_cxx = -lsupc++ -lstdc++
bld_ldflags_dll_cxx = -lsupc++ -lstdc++
! else
bld_ldflags_cxx = -lstdc++
bld_ldflags_dll_cxx = -lstdc++
! endif
!else
bld_ldflags_cxx = -lsupc++ -lstdc++
bld_ldflags_dll_cxx = -lsupc++ -lstdc++
!endif

!ifdef __OSX__
bld_ldflags1 = $(common_ldflags) -Wl,-map,$^&.map
!else
bld_ldflags1 = $(common_ldflags) -Wl,-Map,$^&.map
!endif

bld_ldflags  = $(bld_cl_extra_libs_gen) $(bld_extra_ldflags) $(bld_ldflags_$(proj_type))

# options for linking via cl
bld_cclflags = $(bld_cppflags) $(common_cflags) $(common_flags) -o $@ $(bld_ldflags1)
bld_clflags  = -o $@ $(bld_ldflags1)

!ifndef __WATCOM_TOOLS__

# standard settings
############################
!ifdef __CLANG_TOOLS__
cc   = $(noecho)clang -pipe -c $(ppflags_bldver)
cxx  = $(noecho)clang++ -pipe -c $(ppflags_bldver)
cl   = $(noecho)clang -pipe $(ppflags_bldver)
!else
cc   = $(noecho)gcc -pipe -c $(ppflags_bldver)
cxx  = $(noecho)g++ -pipe -c $(ppflags_bldver)
cl   = $(noecho)gcc -pipe $(ppflags_bldver)
!endif

cppflags_linux  = $(common_cppflags) $(common_cppflags_linux)
cppflags_bsd    = $(common_cppflags) $(common_cppflags_bsd)
cppflags_haiku  = $(common_cppflags) $(common_cppflags_haiku)
cppflags_osx    = $(common_cppflags) $(common_cppflags_osx)
cppflags_osi    = $(common_cppflags) $(common_cppflags_$(host_os))

cppflags_386    = $(common_cppflags_386) $(common_cppflags_$(host_os)_386)
cppflags_ppc    = $(common_cppflags_ppc) $(common_cppflags_$(host_os)_ppc)
cppflags_mps    = $(common_cppflags_mps) $(common_cppflags_$(host_os)_mps)
cppflags_x64    = $(common_cppflags_x64) $(common_cppflags_$(host_os)_x64)
cppflags_arm    = $(common_cppflags_arm) $(common_cppflags_$(host_os)_arm)
cppflags_a64    = $(common_cppflags_a64) $(common_cppflags_$(host_os)_a64)

c_flags   =
cxx_flags = -std=c++98

cflags_gen  = $(bld_cc_sys) $(common_cflags) $(target_cflags_$(bld_cpu)) $(common_flags) $(common_cflags_exe) -o $@
cflags_dll  = $(bld_cc_sys) $(common_cflags) $(target_cflags_$(bld_cpu)) $(common_flags) $(common_cflags_lib_shared) -o $@
cflags_wind = $(cflags_gen)

# options for linking
!ifdef __OSX__
ldflags1 = $(common_ldflags) -Wl,-map,$^&.map
!else
ldflags1 = $(common_ldflags) -Wl,-Map,$^&.map
!endif

ldflags_gen  = $(cl_extra_libs_gen) $(extra_ldflags) $(bld_ldflags_$(proj_type))
ldflags_dll  = $(cl_extra_libs_dll) $(extra_ldflags_dll) $(bld_ldflags_dll_$(proj_type))
ldflags_wind = $(ldflags_gen)

!ifeq sys_dll 1
ldflags = $(ldflags_dll)
!else ifeq sys_windowed 1
ldflags = $(ldflags_wind)
!else
ldflags = $(ldflags_gen)
!endif

# options for single source utility compilations
clflags_gen  = $(common_clflags_exe) $(bld_cl_sys) $(common_flags) -o $@ $(ldflags1)
clflags_dll  = $(common_clflags_lib_shared) $(bld_cl_sys) $(common_flags) -o $@ $(ldflags1)
clflags_wind = $(clflags_gen)

# options for include source code file
incl_file_opts = -include

!endif

!endif  # use_for_build

!else
!error "OS is unsupported by OW build system for this toolchain"
!endif

##############################################################################
#
# definitions for WATCOM toolchain
#
##############################################################################
!else if defined("__WATCOM_TOOLS__")

!if defined("__LINUX__") || defined("__DOS__") || defined("__OS2__") || defined("__NT__")

!ifdef __LINUX__
! if "$(bld_cpu)" == "386" || "$(bld_cpu)" == "axp" || "$(bld_cpu)" == "ppc" || "$(bld_cpu)" == "mps"
use_for_build = 1
! endif
!else ifdef __DOS__
! if "$(bld_cpu)" == "386"
use_for_build = 1
! endif
!else ifdef __OS2__
! if "$(bld_cpu)" == "386"
use_for_build = 1
! endif
!else ifdef __NT__
! if "$(bld_cpu)" == "386" || "$(bld_cpu)" == "axp" || "$(bld_cpu)" == "ppc" || "$(bld_cpu)" == "mps"
use_for_build = 1
! endif
!endif

!ifdef use_for_build

# librarian settings
############################
blibrarian_386  = *wlib
blibrarian_axp  = *wlib
blibrarian_ppc  = *wlib
blibrarian_mps  = *wlib

bld_lib         = $(noecho)$(blibrarian_$(bld_cpu)) -q-b-c-n-pa $@

# build host specific macros
bcc_386         = *wcc386
bcc_axp         = *wccaxp
bcc_ppc         = *wccppc
bcc_mps         = *wccmps

bcl_386         = *wcl386
bcl_axp         = *wclaxp
bcl_ppc         = *wclppc
bcl_mps         = *wclmps

bas_386         = *wasm
bas_axp         = *wasaxp
bas_ppc         = *wasppc
bas_mps         = *wasmps

bcc             = $(bcc_$(bld_cpu)) -zq $(ppflags_bldver)
bccl            = $(noecho)$(bcl_$(bld_cpu)) -zq $(ppflags_bldver)
bcl             = $(noecho)$(bcl_$(bld_cpu)) -zq
bas             = $(bas_$(bld_cpu)) -q $(ppflags_bldver)
blink           = *wlink op q

bld_cc_sys      = $(cflags_$(bld_os))
bld_cl_sys      = $(clflags_$(bld_os)_$(bld_cpu))
bld_incs        = $(bld_extra_incs) -I"$(watcom_dir)/h"

bld_watcom_ver = 0
!ifeq %OWTOOLS WATCOM
bld_watcom_ver = $+$(%OWTOOLSVER)$-
!endif
!if $(bld_watcom_ver) >= 1300 && 0
bld_new_cflags             =-xx-zam
bld_std_cflags             =-zastd=c99
bld_watcom_common_cflags   =-wx-wce=C310
bld_watcom_common_cxxflags =-w8-wce=P579
!else
bld_std_cflags             =-za99
bld_watcom_common_cflags   =-wx-wce=310
bld_watcom_common_cxxflags =-w8-wce=579
!endif
bld_dft_oflags = -ox

!ifeq debug 1
bld_gen_cflags  = $(bld_watcom_common_cflags)$(bld_std_cflags)-j-d2$(bld_new_cflags)-fo=.obj
!else ifeq debug 2
bld_gen_cflags  = $(bld_watcom_common_cflags)$(bld_std_cflags)-j-d2-DDEVBUILD $(bld_new_cflags)-fo=.obj
!else
bld_gen_cflags  = $(bld_watcom_common_cflags)$(bld_std_cflags)-j-s$(bld_dft_oflags)$(bld_new_cflags)-fo=.obj
!endif

# options for source compilations
bld_cflags      = $(bld_gen_cflags)

# options for single source utility compilations
bld_cclflags    = $(bld_gen_cflags) -fe=$@
bld_clflags     = -fe=$@

# options for linking
bld_ldflags     =

!endif  # use_for_build

!else
!error "OS is unsupported by OW build system for this toolchain"
!endif

##############################################################################
#
# Unknown toolchain
#
##############################################################################
!else ifndef __WATCOM_TOOLS__
!error "Toolchain is unsupported by OW build system"
!endif

##############################################################################

bld_cc          = $(bcc) $(bld_cc_sys) $(bld_incs)
bld_ccl         = $(bccl) $(bld_cc_sys) $(bld_cl_sys) $(bld_incs)
bld_cl          = $(bcl) $(bld_cl_sys)

cpp             = $(noecho)*wcpp $(bldver_cppflags)

echo_optencod : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo optencod $@
!endif

echo_awk : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo awk $@
!endif

echo_yacc : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo yacc $@
!endif

echo_findhash : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo findhash $@
!endif

echo_bldccl : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo bld_ccl $@
!endif

echo_bldcl : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo bld_cl $@
!endif

echo_execute : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo $[@ $@
!endif

echo_cpp : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo cpp $@
!endif

echo_sed : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo sed $@
!endif

echo_wsplice : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo wsplice $@
!endif

echo_re2c : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo re2c $@
!endif

echo_msgencod : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo msgencod $@
!endif

echo_aslink : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo bld_as $^&.obj
    @echo bld_link $^&.tmp
!endif

