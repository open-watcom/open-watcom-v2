# global definition which tool is quiet
cc         += -zq
cl         += -zq
cxx        += -zq
as         += -q
linker     += op q
librarian  += -q
rc         += -q
rcaui      += -q

bcc        += -zq
bcl        += -zq
bas        += -q
blink      += op q
blib       += -q

# use native tools for x64 cpu
# skip build for unsupported platforms
!ifeq host_cpu x64
!ifneq bld_cpu x64
skip_build: .SYMBOLIC
!else ifndef bld64host_$(host_os)
skip_build: .SYMBOLIC
!endif
# use native tools for arm cpu
# skip build for unsupported platforms
!else ifeq host_cpu arm
!ifneq bld_cpu arm
skip_build: .SYMBOLIC
!endif
!endif

# enable to switch to causeway extender
!ifdef $(proj_name)_causeway
clflags_dos_386 = -l=causeway
lflags_dos_386  = sys causeway
!endif

!ifndef __NTAXP__

!ifeq host_cpu axp
cc_386      += $(bld_incs)
cxx_386     += $(bld_incs)
!endif

!endif

# bootstrap overrides
######################

!ifeq bootstrap 1
!ifdef __WATCOM__

!ifdef __LOADDLL__
!loaddll wcc    wccd.dll
!loaddll wcc386 wccd386.dll
!loaddll wccaxp wccdaxp.dll
!loaddll wlib   wlibd.dll
!loaddll wlink  wlinkd.dll
!loaddll wpp    wppdi86.dll
!loaddll wpp386 wppd386.dll
!loaddll wppaxp wppdaxp.dll
!endif

!endif
!endif

##############################################################################
#
# definitions for Linux native compiler
#
##############################################################################
!ifdef __LINUX__

!if !defined( "__WATCOM__" ) || "$(bld_cpu)" == "x64" || "$(bld_cpu)" == "arm"

# common settings
############################
common_cppflags_linux = -D__LINUX__ -D__UNIX__ -D__FLAT__

common_cppflags_386   = -D_M_IX86 -D__386__ -D__LINUX_386__
common_cppflags_x64   = -D_M_X64 -D__LINUX_X64__
common_cppflags_ppc   = -D__PPC__
common_cppflags_mps   = -D__MIPS__ -Umips
common_cppflags_arm   = -D_M_ARM -D__LINUX_ARM__

# common release/debug flags
common_flags_rel = -O -g
common_flags_dbg = -g
!ifeq release 1
common_flags = $(common_flags_rel)
!else
common_flags = $(common_flags_dbg)
!endif

# Warning flags: all enabled except the ones that have no use besides annoy people
!ifdef __CLANG__
common_cflags_wng = -Wall -Wno-switch -Wno-missing-braces -Wno-parentheses -Wno-self-assign -Wno-implicit-exception-spec-mismatch -ferror-limit=200
!else
common_cflags_wng = -Wall -Wno-switch -Wno-missing-braces -Wno-parentheses
!endif
common_cflags = $(common_cflags_wng)

common_ldflags_rel =
common_ldflags_dbg =
!ifeq release 1
common_ldflags = $(common_ldflags_rel)
!else
common_ldflags = $(common_ldflags_dbg)
!endif

# Flags for building DLLs
common_cflags_lib_shared  = -fPIC
common_clflags_lib_shared = -shared

# DLL/shared library file extension
ext_lib_shared = .so

# extra objects for linking via cl
cl_objs_gen =
cl_objs_dll =
cl_libs_gen = $(watcom_dir)/$(bin_subdir)/clibext.lib
cl_libs_dll = $(watcom_dir)/$(bin_subdir)/clibexts.lib

!ifeq sys_dll 1
cl_objs = $(cl_objs_dll)
cl_libs = $(cl_libs_dll)
!else
cl_objs = $(cl_objs_gen)
cl_libs = $(cl_libs_gen)
!endif

# bld settings
############################
!ifdef __CLANG__
bcc  = clang -pipe -c
bcxx = clang++ -pipe -c
bcl  = clang -pipe
!else
bcc  = gcc -pipe -c
bcxx = g++ -pipe -c
bcl  = gcc -pipe
!endif

blib      = ar

bld_cc_sys = -fno-asm -fno-common -fsigned-char
bld_cl_sys =

bld_incs = $(bld_extra_incs) -I"$(watcom_dir)/h"

bld_cppflags = $(common_cppflags_linux) $(common_cppflags_$(bld_cpu))

bld_cflags   = $(common_cflags) $(common_flags) -o $@

bld_cxxflags = -std=c++98

# options for linking
!ifdef __CLANG__
bld_ldflags_cxx = -lstdc++
bld_ldflags_dll_cxx = -lstdc++
!else
bld_ldflags_cxx = -lsupc++ -lstdc++
bld_ldflags_dll_cxx = -lsupc++ -lstdc++
!endif

bld_ldflags1 = $(common_ldflags) -Wl,-Map,$^&.map

bld_ldflags  = $(bld_extra_ldflags) $(bld_ldflags_$(proj_type))

# options for linking via cl
bld_clflags  = $(bld_cppflags) $(common_cflags) $(common_flags) -o $@ $(cl_libs_gen) $(bld_ldflags1)

bld_libflags = crs $^@

!ifndef __WATCOM__

# standard settings
############################
!ifdef __CLANG__
cc   = clang -pipe -c
cxx  = clang++ -pipe -c
cl   = clang -pipe
!else
cc   = gcc -pipe -c
cxx  = g++ -pipe -c
cl   = gcc -pipe
!endif

cppflags_linux = $(common_cppflags_linux)
cppflags_osi   = $(common_cppflags_linux)
cppflags_386   = $(common_cppflags_386)
cppflags_ppc   = $(common_cppflags_ppc)
cppflags_mps   = $(common_cppflags_mps)
cppflags_x64   = $(common_cppflags_x64)
cppflags_arm   = $(common_cppflags_arm)

cxxflags = -std=c++98

cflags_gen  = $(bld_cc_sys) $(common_cflags) $(common_flags) -o $@
cflags_dll  = $(bld_cc_sys) $(common_cflags) $(common_flags) $(common_cflags_lib_shared) -o $@
cflags_wind = $(cflags_gen)

# options for linking
ldflags1 = $(common_ldflags) -Wl,-Map,$^&.map

ldflags_gen  = $(cl_libs_gen) $(extra_ldflags) $(bld_ldflags_$(proj_type))
ldflags_dll  = $(cl_libs_dll) $(extra_ldflags_dll) $(bld_ldflags_dll_$(proj_type))
ldflags_wind = $(ldflags_gen)

!ifeq sys_dll 1
ldflags = $(ldflags_dll)
!else ifeq sys_windowed 1
ldflags = $(ldflags_wind)
!else
ldflags = $(ldflags_gen)
!endif

# options for single source utility compilations
clflags_gen  = $(bld_cl_sys) $(common_flags) -o $@ $(ldflags1)
clflags_dll  = $(common_clflags_lib_shared) $(bld_cl_sys) $(common_flags) -o $@ $(ldflags1)
clflags_wind = $(clflags_gen)

# options used for setup source code Japanese DBCS character set
c_japan_charset = -finput-charset=CP932

# options for preprocessing source code
preproc_opts  = -x c -E

# options for include source code file
incl_file_opts = -include

!endif
!endif

##############################################################################
#
# definitions for BSD native compiler
#
##############################################################################

!else ifdef __BSD__

#!if !defined( "__WATCOM__" ) || "$(bld_cpu)" == "x64" || "$(bld_cpu)" == "386"
!if 1

# common settings
############################
common_cppflags_bsd = -D__BSD__ -D__UNIX__ -D__FLAT__
!ifdef __OSX__
common_cppflags_osx = -D__OSX__
!else
common_cppflags_osx =
!endif

common_cppflags_386   = -D_M_IX86 -D__386__ -D__BSD_386__
common_cppflags_x64   = -D_M_X64 -D__BSD_X64__
common_cppflags_ppc   = -D__PPC__
common_cppflags_arm   = -D__ARM__

# common release/debug flags
common_flags_rel = -O -g
common_flags_dbg = -g
!ifeq release 1
common_flags = $(common_flags_rel)
!else
common_flags = $(common_flags_dbg)
!endif

# Warning flags: all enabled except the ones that have no use besides annoy people
!ifdef __CLANG__
common_cflags_wng = -Wall -Wno-switch -Wno-missing-braces -Wno-parentheses -Wno-self-assign -Wno-implicit-exception-spec-mismatch -ferror-limit=200
!else
common_cflags_wng = -Wall -Wno-switch -Wno-missing-braces -Wno-parentheses
!endif
common_cflags = $(common_cflags_wng)

common_ldflags_rel =
common_ldflags_dbg =
!ifeq release 1
common_ldflags = $(common_ldflags_rel)
!else
common_ldflags = $(common_ldflags_dbg)
!endif

# Flags for building DLLs
common_cflags_lib_shared  = -fPIC
common_clflags_lib_shared = -shared

# DLL/shared library file extension
ext_lib_shared = .so

# extra objects for linking via cl
cl_objs_gen =
cl_objs_dll =
cl_libs_gen = $(watcom_dir)/$(bin_subdir)/clibext.lib
cl_libs_dll = $(watcom_dir)/$(bin_subdir)/clibexts.lib

!ifeq sys_dll 1
cl_objs = $(cl_objs_dll)
cl_libs = $(cl_libs_dll)
!else
cl_objs = $(cl_objs_gen)
cl_libs = $(cl_libs_gen)
!endif

# bld settings
############################
!ifdef __CLANG__
bcc  = clang -pipe -c
bcxx = clang++ -pipe -c
bcl  = clang -pipe
!else
bcc  = gcc -pipe -c
bcxx = g++ -pipe -c
bcl  = gcc -pipe
!endif

blib      = ar

bld_cc_sys = -fno-asm -fno-common -fsigned-char
bld_cl_sys =

bld_incs = $(bld_extra_incs) -I"$(watcom_dir)/h"

bld_cppflags = $(common_cppflags_bsd) $(common_cppflags_osx) $(common_cppflags_$(bld_cpu))

bld_cflags   = $(common_cflags) $(common_flags) -o $@

bld_cxxflags = -std=c++98

# options for linking
!ifdef __OSX__
bld_ldflags_cxx = -lc++
bld_ldflags_dll_cxx = -lc++
!else ifdef __CLANG__
bld_ldflags_cxx = -lstdc++
bld_ldflags_dll_cxx = -lstdc++
!else
bld_ldflags_cxx = -lsupc++ -lstdc++
bld_ldflags_dll_cxx = -lsupc++ -lstdc++
!endif

bld_ldflags1 = $(common_ldflags) -Wl,-map,$^&.map

bld_ldflags  = $(bld_extra_ldflags) $(bld_ldflags_$(proj_type))

# options for linking via cl
bld_clflags  = $(bld_cppflags) $(common_cflags) $(common_flags) -o $@ $(cl_libs_gen) $(bld_ldflags1)

bld_libflags = crs $^@

!ifndef __WATCOM__

# standard settings
############################
!ifdef __CLANG__
cc  = clang -pipe -c
cxx = clang++ -pipe -c
cl  = clang -pipe
!else
cc  = gcc -pipe -c
cxx = g++ -pipe -c
cl  = gcc -pipe
!endif

cppflags_bsd   = $(common_cppflags_bsd)
cppflags_osi   = $(common_cppflags_bsd)
cppflags_osx   = $(common_cppflags_osx)
cppflags_386   = $(common_cppflags_386)
cppflags_ppc   = $(common_cppflags_ppc)
cppflags_x64   = $(common_cppflags_x64)

cxxflags = -std=c++98

cflags_gen  = $(bld_cc_sys) $(common_cflags) $(common_flags) -o $@
cflags_dll  = $(bld_cc_sys) $(common_cflags) $(common_flags) $(common_cflags_lib_shared) -o $@
cflags_wind = $(cflags_gen)

# options for linking
ldflags1 = $(common_ldflags) -Wl,-map,$^&.map

ldflags_gen  = $(cl_libs_gen) $(extra_ldflags) $(bld_ldflags_$(proj_type))
ldflags_dll  = $(cl_libs_dll) $(extra_ldflags_dll) $(bld_ldflags_dll_$(proj_type))
ldflags_wind = $(ldflags_gen)

!ifeq sys_dll 1
ldflags = $(ldflags_dll)
!else ifeq sys_windowed 1
ldflags = $(ldflags_wind)
!else
ldflags = $(ldflags_gen)
!endif

# options for single source utility compilations
clflags_gen  = $(bld_cl_sys) $(common_flags) -o $@ $(ldflags1)
clflags_dll  = $(common_clflags_lib_shared) $(bld_cl_sys) $(common_flags) -o $@ $(ldflags1)
clflags_wind = $(clflags_gen)

# options used for setup source code Japanese DBCS character set
c_japan_charset = -finput-charset=CP932

# options for preprocessing source code
preproc_opts  = -x c -E

# options for include source code file
incl_file_opts = -include

!endif
!endif

##############################################################################
#
# definitions for HAIKU native compiler
#
##############################################################################

!else ifdef __HAIKU__

#!if !defined( "__WATCOM__" ) || "$(bld_cpu)" == "x64"
!if 1

# common settings
############################
common_cppflags_haiku = -D__HAIKU__ -D__UNIX__ -D__FLAT__

common_cppflags_386   = -D_M_IX86 -D__386__ -D__HAIKU_386__
common_cppflags_x64   = -D_M_X64 -D__HAIKU_X64__
common_cppflags_ppc   = -D__PPC__

# common release/debug flags
common_flags_rel = -O -g
common_flags_dbg = -g
!ifeq release 1
common_flags = $(common_flags_rel)
!else
common_flags = $(common_flags_dbg)
!endif

# Warning flags: all enabled except the ones that have no use besides annoy people
!ifdef __CLANG__
common_cflags_wng = -Wall -Wno-switch -Wno-missing-braces -Wno-parentheses -Wno-self-assign -Wno-implicit-exception-spec-mismatch -ferror-limit=200
!else
common_cflags_wng = -Wall -Wno-switch -Wno-missing-braces -Wno-parentheses
!endif
common_cflags = $(common_cflags_wng)

common_ldflags_rel =
common_ldflags_dbg =
!ifeq release 1
common_ldflags = $(common_ldflags_rel)
!else
common_ldflags = $(common_ldflags_dbg)
!endif

# Flags for building DLLs
common_cflags_lib_shared  = -fPIC
common_clflags_lib_shared = -shared

# DLL/shared library file extension
ext_lib_shared = .so

# extra objects for linking via cl
cl_objs_gen =
cl_objs_dll =
cl_libs_gen = $(watcom_dir)/$(bin_subdir)/clibext.lib
cl_libs_dll = $(watcom_dir)/$(bin_subdir)/clibexts.lib

!ifeq sys_dll 1
cl_objs = $(cl_objs_dll)
cl_libs = $(cl_libs_dll)
!else
cl_objs = $(cl_objs_gen)
cl_libs = $(cl_libs_gen)
!endif

# bld settings
############################
!ifdef __CLANG__
bcc  = clang -pipe -c
bcxx = clang++ -pipe -c
bcl  = clang -pipe
!else
bcc  = gcc -pipe -c
bcxx = g++ -pipe -c
bcl  = gcc -pipe
!endif

blib      = ar

bld_cc_sys = -fno-asm -fno-common -fsigned-char
bld_cl_sys =

bld_incs = $(bld_extra_incs) -I"$(watcom_dir)/h"

bld_cppflags = $(common_cppflags_haiku) $(common_cppflags_$(bld_cpu))

bld_cflags   = $(common_cflags) $(common_flags) -o $@

bld_cxxflags = -std=c++98

# options for linking
!ifdef __CLANG__
bld_ldflags_cxx = -lstdc++
!else
bld_ldflags_cxx = -lsupc++ -lstdc++
!endif

bld_ldflags1 = $(common_ldflags) -Wl,-Map,$^&.map

bld_ldflags  = $(bld_extra_ldflags) $(bld_ldflags_$(proj_type))

# options for linking via cl
bld_clflags  = $(bld_cppflags) $(common_cflags) $(common_flags) -o $@ $(cl_libs_gen) $(bld_ldflags1)

bld_libflags = crs $^@

!ifndef __WATCOM__

# standard settings
############################
!ifdef __CLANG__
cc  = clang -pipe -c
cxx = clang++ -pipe -c
cl  = clang -pipe
!else
cc  = gcc -pipe -c
cxx = g++ -pipe -c
cl  = gcc -pipe
!endif

cppflags_haiku = $(common_cppflags_haiku)
cppflags_osi   = $(common_cppflags_haiku)
cppflags_386   = $(common_cppflags_386)
cppflags_ppc   = $(common_cppflags_ppc)
cppflags_x64   = $(common_cppflags_x64)

cxxflags = -std=c++98

cflags_gen  = $(bld_cc_sys) $(common_cflags) $(common_flags) -o $@
cflags_dll  = $(bld_cc_sys) $(common_cflags) $(common_flags) $(common_cflags_lib_shared) -o $@
cflags_wind = $(cflags_gen)

# options for linking
ldflags1 = $(common_ldflags) -Wl,-Map,$^&.map

ldflags_gen  = $(cl_libs_gen) $(extra_ldflags) $(bld_ldflags_$(proj_type))
ldflags_dll  = $(cl_libs_dll) $(extra_ldflags_dll) $(bld_ldflags_dll_$(proj_type))
ldflags_wind = $(ldflags_gen)

!ifeq sys_dll 1
ldflags = $(ldflags_dll)
!else ifeq sys_windowed 1
ldflags = $(ldflags_wind)
!else
ldflags = $(ldflags_gen)
!endif

# options for single source utility compilations
clflags_gen  = $(bld_cl_sys) $(common_flags) -o $@ $(ldflags1)
clflags_dll  = $(common_clflags_lib_shared) $(bld_cl_sys) $(common_flags) -o $@ $(ldflags1)
clflags_wind = $(clflags_gen)

# options used for setup source code Japanese DBCS character set
c_japan_charset = -finput-charset=CP932

# options for preprocessing source code
preproc_opts  = -x c -E

# options for include source code file
incl_file_opts = -include

!endif
!endif

##############################################################################
#
# definitions for NT native compiler
#
##############################################################################
!else ifdef __NT__

!if !defined( "__WATCOM__" ) || "$(bld_cpu)" == "x64"

additional_cleanup_sys = *.pdb

# common settings
############################
common_cppflags_nt = -D__NT__ -D__FLAT__

common_cppflags_386  = -D__386__ -D__NT_386__
common_cppflags_x64  = -D__NT_X64__

# common release/debug flags
!ifdef __INTEL__
common_flags_rel = -Ox -Zi -fast
common_flags_dbg = -Zi -fast
!else
common_flags_rel = -Ox -Zi
common_flags_dbg = -Zi
!endif
!ifeq release 1
common_flags = $(common_flags_rel)
!else
common_flags = $(common_flags_dbg)
!endif

# -wd4068 "unknown pragma"
# -wd4102 "unreferenced label"
# -wd4127 "conditional expression is constant"
# -wd4214 "bit field types other than int"
# -wd4244 "conversion ....., possible loss of data"
# -wd4306 "type cast: conversion ...... of greater size"
# -wd4702 "unreachable code"
#common_cflags_wng = -wd4068 -wd4102 -wd4127 -wd4214 -wd4244 -wd4306 -wd4702
common_cflags_wng = -W4 -wd4214
common_cflags = $(common_cflags_wng) -MT -D_STATIC_CPPLIB

common_ldflags_rel =
common_ldflags_dbg =
!ifeq release 1
common_ldflags = $(common_ldflags_rel)
!else
common_ldflags = $(common_ldflags_dbg)
!endif

# Flags for building DLLs
common_cflags_lib_shared  = -LD
common_clflags_lib_shared = -MT -LD

# DLL/shared library file extension
ext_lib_shared = .dll

# extra objects for linking via cl
cl_objs_gen =
cl_objs_dll =
cl_libs_gen = $(watcom_dir)/$(bin_subdir)/clibext.lib
cl_libs_dll = $(watcom_dir)/$(bin_subdir)/clibexts.lib

!ifeq sys_dll 1
cl_objs = $(cl_objs_dll)
cl_libs = $(cl_libs_dll)
!else
cl_objs = $(cl_objs_gen)
cl_libs = $(cl_libs_gen)
!endif

# bld settings
############################
!ifdef __INTEL__
bcc  = icl -nologo -c
bcxx = icl -nologo -c
bcl  = icl -nologo

blib = xilib -nologo
!else
bcc  = cl -nologo -c
bcxx = cl -nologo -c
bcl  = cl -nologo

blib = lib -nologo
!endif

bld_cc_sys = -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS
bld_cl_sys =

bld_incs = $(bld_extra_incs) -I"$(watcom_dir)/h"

bld_cppflags = $(common_cppflags_nt) $(common_cppflags_$(bld_cpu))

bld_cflags   = $(common_cflags) $(common_flags) -Fo$@

bld_cxxflags = -EHsc

bld_ldflags1 = $(common_ldflags) -Fm

bld_ldflags  =  -link -nologo &
    -INCREMENTAL:NO -DEFAULTLIB:user32.lib -DEFAULTLIB:ole32.lib -DEFAULTLIB:advapi32.lib &
    -DEFAULTLIB:shell32.lib -DEFAULTLIB:gdi32.lib -DEFAULTLIB:comdlg32.lib $(bld_extra_ldflags) &
    $(bld_ldflags_$(proj_type))

# options for linking via cl
bld_clflags  = $(bld_cppflags) $(common_cflags) $(common_flags) -Fe$@ $(cl_libs_gen) $(bld_ldflags1)

bld_libflags = -out:$^@

!ifndef __WATCOM__

# standard settings
############################
!ifdef __INTEL__
cc  = icl -nologo -c
cxx = icl -nologo -c
cl  = icl -nologo

!else
cc   = cl -nologo -c
cxx  = cl -nologo -c
cl   = cl -nologo

!endif

cppflags_nt  = $(common_cppflags_nt)
cppflags_osi = $(common_cppflags_nt)
cppflags_386 = $(common_cppflags_386)
cppflags_x64 = $(common_cppflags_x64)

cxxflags = -EHsc

cflags_gen  = $(bld_cc_sys) $(common_cflags) $(common_flags) -Fo$@
cflags_dll  = $(bld_cc_sys) $(common_cflags) $(common_flags) $(common_cflags_lib_shared) -Fo$@
cflags_wind = $(cflags_gen)

# options for linking
ldflags1 = $(common_ldflags) -Fm

ldflags_gen_all  = -link -nologo &
    -INCREMENTAL:NO -DEFAULTLIB:user32.lib -DEFAULTLIB:ole32.lib -DEFAULTLIB:advapi32.lib &
    -DEFAULTLIB:shell32.lib -DEFAULTLIB:gdi32.lib -DEFAULTLIB:comdlg32.lib

ldflags_gen  = $(cl_libs_gen) $(ldflags_gen_all) $(extra_ldflags) $(bld_ldflags_$(proj_type))
ldflags_dll  = $(cl_libs_dll) $(ldflags_gen_all) $(extra_ldflags_dll) $(bld_ldflags_dll_$(proj_type))
ldflags_wind = $(cl_libs_gen) $(ldflags_gen_all) -SUBSYSTEM:WINDOWS $(extra_ldflags) $(bld_ldflags_$(proj_type))

!ifeq sys_dll 1
ldflags = $(ldflags_dll)
!else ifeq sys_windowed 1
ldflags = $(ldflags_wind)
!else
ldflags = $(ldflags_gen)
!endif

# options for linking by cl
clflags_gen  = $(bld_cl_sys) $(common_flags) -Fe$@ $(ldflags1)
clflags_dll  = $(bld_cl_sys) $(common_flags) $(common_clflags_lib_shared) -Fe$@ $(ldflags1)
clflags_wind = $(clflags_gen)

# options used for setup source code Japanese DBCS character set
c_japan_charset =

# options for preprocessing source code
preproc_opts  = -E

# options for include source code file
incl_file_opts = -FI

!endif
!endif

!endif
##############################################################################
