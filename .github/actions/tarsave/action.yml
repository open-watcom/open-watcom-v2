name: tar-save
description: 'Create compressed tar file with git sub-directory full contents'
inputs:
  arch:
    description: 'run-time platform'
    required: false
    default: ''
    type: string
  gitpath:
    description: 'git subdirectory'
    required: false
    default: ''
    type: string
  fullname:
    description: 'tar file full name'
    required: false
    default: ''
    type: string
  format:
    description: 'tar file compression method, by default .xz'
    required: false
    default: ''
    type: string
  owdebug:
    description: 'verbosed/debug output for GH Actions scripts development'
    required: false
    default: ''
    type: string
runs:
  using: composite
  steps:
  - name: Get source folder
    id: srcpath
    run: >
      Join-Path ${{ github.workspace }} ${{ inputs.gitpath }}
      | Join-String -OutputPrefix 'path='
      | Out-File -FilePath ${{ github.output }} -Encoding utf8 -Append
    shell: pwsh
  - id: tarcmd
    run: >
      if( "${{ inputs.owdebug }}" -eq '1' ) {
        'opts=-cvf' | Out-File -FilePath ${{ github.output }} -Encoding utf8 -Append
      } else {
        'opts=-cf' | Out-File -FilePath ${{ github.output }} -Encoding utf8 -Append
      }
    shell: pwsh      
  - if: inputs.arch == 'lnx' && inputs.format == 'gzip'
    name: Create tar File Linux
    run: tar ${{ steps.tarcmd.outputs.opts }} "${{ inputs.fullname }}" -z --overwrite -C "${{ steps.srcpath.outputs.path }}" .
    shell: bash
  - if: inputs.arch == 'lnx' && inputs.format != 'gzip'
    name: Create tar File Linux
    run: tar ${{ steps.tarcmd.outputs.opts }} "${{ inputs.fullname }}" -J --overwrite -C "${{ steps.srcpath.outputs.path }}" .
    shell: bash
  - if: inputs.arch == 'osx' && inputs.format == 'gzip'
    name: Create tar File OSX
    run: gtar ${{ steps.tarcmd.outputs.opts }} "${{ inputs.fullname }}" -z --overwrite -C "${{ steps.srcpath.outputs.path }}" .
    shell: bash
  - if: inputs.arch == 'osx' && inputs.format != 'gzip'
    name: Create tar File OSX
    run: gtar ${{ steps.tarcmd.outputs.opts }} "${{ inputs.fullname }}" -J --overwrite -C "${{ steps.srcpath.outputs.path }}" .
    shell: bash
  - if: inputs.arch == 'nt' && inputs.format == 'gzip'
    name: Create tar File (Windows)
    run: |
      7z a "${{ inputs.fullname }}" "${{ steps.srcpath.outputs.path }}"
      ci\slash.cmd "${{ inputs.fullname }}" > lst.txt
      7z rn "${{ inputs.fullname }}" @lst.txt
      del lst.txt
    shell: cmd
  - if: inputs.arch == 'nt' && inputs.format != 'gzip'
    name: Create tar File (Windows)
    run: |
      tar ${{ steps.tarcmd.outputs.opts }} ${{ runner.temp }}\owartifact.tar -C "${{ steps.srcpath.outputs.path }}" .
      7z a -txz "${{ inputs.fullname }}" ${{ runner.temp }}\owartifact.tar
      del ${{ runner.temp }}\owartifact.tar
    shell: cmd
