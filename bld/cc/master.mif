tree_depth = 4

proj_name = cc

cc_autodepends = .autodepend

#
# names
#

# Base DLL name needs to be 8 chars or less on OS/2, argh! Additionally,
# internal module name may be required to match file name on some platforms.
!ifdef bootstrap
boot_prefix = b
!endif
!ifneq target_cpu i86
suffix      = $(target_cpu)
!endif
exename     = $(boot_prefix)wcc$(suffix)
dllname     = $(boot_prefix)wccd$(suffix)
# international data file name
intname     = wcc$(target_cpu)

!ifdef bootstrap
exetarg_name = $(exename)
dlltarg_name = $(dllname)
bin_intname  = $(intname)
!else
exetarg_name = $(bin_subdir)/$(exename)
dlltarg_name = $(bin_subdir)/$(dllname)
bin_intname  = $(bin_subdir)/$(intname)
!endif

additional_clean = *.int *.gh *.grh *.gc *.grc
!ifndef bootstrap
additional_clean_subdirs = $(bin_subdir)
!endif

$(bin_subdir) : .EXPLICIT
    mkdir $@

!include cproj.mif
!include defrule.mif
!include dllrule.mif
!include deftarg.mif
!include dllbase.mif
!include trmem.mif

# CODEGEN stuff
!include $(cg_dir)/mif/fe.mif
!include $(cpp_dir)/client.mif
!include asclient.mif

!include ../../ccobjs.mif

#
# cflags
#
.c: ../../c;$(asminline_c);$(fe_misc_dir)/c;$(cpp_c_dirs);$(watcom_dir)/c

inc_dirs  = -I. -I.. -I"../../h" $(cg_inc_dirs) $(asminline_inc_dirs) $(cpp_inc_dirs) $(dwarfw_inc_dirs) -I"$(comp_cfg_dir)/h" -I"$(fe_misc_dir)/h"

extra_cpp_flags = -DINCL_MSGTEXT
!ifneq cc_dll 1
extra_cpp_flags += -DIDE_PGM
!endif
!ifeq dll_cg 1
extra_cpp_flags += -D_CGDLL
!endif
extra_cppflags_axp = -DAS_ALPHA
extra_cppflags_mps = -DAS_MIPS
extra_cppflags_ppc = -DAS_PPC
extra_cpp_flags += $(extra_cppflags_$(target_cpu))
!ifeq debug 2
extra_cpp_flags += -DAS_DEBUG_DUMP
!endif

extra_cpp_flags_cmsg     = -D__msg_file_prefix=$(intname)
!ifeq cc_dll 1
! ifeq host_os dos
extra_cpp_flags_ideentry = -DCAUSEWAY
! endif
!else
extra_cpp_flags_idedrv   = -DSTATIC_LINKAGE
!endif
extra_cpp_flags_maindrv  = -DDLL_NAME=$(dllname)

extra_c_flags_386 = -3r

!ifdef __WATCOM_TOOLS__
! ifndef bootstrap
!  ifeq debug 0
extra_c_flags_cscan_386 = -5r
extra_c_flags_cscan    = $(extra_c_flags_cscan_$(host_cpu))
!  endif
! endif
!endif
extra_c_flags_intlload = $(incl_file_opts)fesupp.h
extra_c_flags_cmdlnprs = $(incl_file_opts)fesupp.h

#
# lflags
#
# NOTE: "op off=?" must be 8K bigger than the stack size in wlink_sys_qnx_f
extra_l_flags_qnx = option stack=16k,offset=24k, priv=3
extra_l_flags_dos = option stack=32k

extra_l_flags_dll     = option implib $(wcc_dllbase_$(host_os)_$(host_cpu))
extra_l_flags_dll_nt  = initinstance terminstance op modname='$(dllname).dll'
extra_l_flags_dll_os2 = initinstance terminstance op manyautodata op modname='$(dllname)'

# explicit rules
#################

prebuild_objs = &
    usage.gh &
    msgtxt.gh &
    msgdefs.gh &
    msgattr.gh &
    weights.gh &
    keywords.gh &
    cmdlnprs.gh &
    $(asminline_deps) &
    code$(target_cpu).gh &
    $(bin_intname)01.int

!ifndef bootstrap
all: $(bin_subdir) $(exetarg_name).exe .symbolic
!endif

#
# EXE
#
!ifdef cc_dll
exetarg_prebuild_objs = $(dlltarg_name).dll
exetarg_objs          = $(comp_objs_drv)
exetarg_libs_dos      = cwdll.lib
exetarg_libs          = $(dlltarg_name).lib $(exetarg_libs_$(host_os))
!else
exetarg_prebuild_objs = $(prebuild_objs)
exetarg_objs          = $(comp_objs_exe)
exetarg_libs          = $(asminline_lib) $(cg_libs)
!endif
exetarg_res_version_nt_386 = exever.res
exetarg_res_version_nt_x64 = exever.res
exetarg_qnx_res       = usage.u
exetarg_name          = $(exetarg_name)
!include exetarg.mif

#
# DLL
#
dlltarg_prebuild_objs = $(dll_subdir) $(prebuild_objs)
dlltarg_objs          = $(comp_objs_dll)
dlltarg_libs          = $(asminline_lib) $(cg_libs)
dlltarg_res_version_nt_386 = version.res
dlltarg_res_version_nt_x64 = version.res
dlltarg_name          = $(dlltarg_name)
!include dlltarg.mif

#
# rc and others
#
verrc_dll = $(dllname)
verrc_exe = $(exename)
!include verrc.mif

!ifeq target_cpu axp

codeaxp.gh :
    echo // Dummy file > $@

!else ifeq target_cpu ppc

codeppc.gh :
    echo // Dummy file > $@

!else ifeq target_cpu mps

codemps.gh :
    echo // Dummy file > $@

!else  # Intel i86 or 386

code$(target_cpu).gh : ./mkcode.exe xcode$(target_cpu).tmp
    @%make echo_execute
    $(noecho)$[@ $]@ $@
!endif

target_as_axp   = bwasaxp -zq -w8
target_as_i86   = bwasm -zq -w8-cx
target_as_386   = bwasm -zq -w8-cx -3
target_as_ppc   = bwasppc -zq -w8
target_as_mps   = bwasmps -zq -w8

xcode$(target_cpu).tmp: ../../a/code$(target_cpu).asm
    @%make echo_aslink
    $(noecho)*$(target_as_$(target_cpu)) -I"$(watcom_dir)/h" -fo=.obj $[@
    $(noecho)*bwlink system bin op quiet file code$(target_cpu).obj name $@

./mkcode.exe: mkcode.c
    @%make echo_bldccl
    $(bld_ccl) $[@ $(bld_cclflags) $(bld_ldflags)

#msgencod_enc_linux = -utf8

msgtxt.gh msgdefs.gh msgattr.gh errors01.int : ../../gml/cerrs.gml
    @%make echo_msgencod
    $(noecho)*msgencod -q -s -i -ip -g $(msgencod_enc_$(host_os)) ../../gml/cerrs.gml msgtxt.gh msgdefs.gh msgattr.gh .

./intlbin.exe: $(fe_misc_dir)/c/intlbin.c
    @%make echo_bldccl
    $(bld_ccl) $[@ -I"$(fe_misc_dir)/h" $(bld_cclflags) $(bld_ldflags)

$(bin_intname)01.int : ./intlbin.exe errors01.int usage01.int
    $[@ $@

key_objs = ../../h/c.key ../../h/pc.key ../../h/seh.key

weights.gh keywords.gh : $(key_objs)
    @%make echo_findhash
    $(noecho)findhash -q -e ",OPR_NOP,-1" $(key_objs)

# optencod options and targets for various hosts
!ifdef exetarg_qnx_res
optencod_opt_qnx    = -u=$(exetarg_qnx_res)
!endif
#optencod_enc_linux  = -utf8
optencod_targets = $(target_cpu) $(host_os)
!ifeq debug 2
optencod_targets += dbg
!endif

cmdlnprs.gh cmdlnprs.gc usage.gh usage01.int $(exetarg_$(host_os)_res): ../../gml/options.gml
    @%make echo_optencod
    $(noecho)*optencod -q -i -n $(optencod_opt_$(host_os)) $(optencod_enc_$(host_os)) $]@ cmdlnprs.gh cmdlnprs.gc usage.gh $(optencod_targets)
