/***************************************************************************
 * FILE: time.h/ctime (Time functions)
 *
:include crwat.sp
 *
 * Description: This header is part of the C/C++ standard library. It
 *              declares facilities for manipulating calendar dates and
 *              times.
 ***************************************************************************/
:segment CNAME
#ifndef _CTIME_INCLUDED
#define _CTIME_INCLUDED

:include readonly.sp

:include cpponly.sp
:elsesegment
#ifndef _TIME_H_INCLUDED
#define _TIME_H_INCLUDED

:include readonly.sp

:: The following segment only appears in time.h
#ifdef __cplusplus

#include <ctime>

// C99 types in time.h
#ifndef _CLOCK_T_DEFINED
#define _CLOCK_T_DEFINED
 using std::clock_t;
#endif
#ifndef _SIZE_T_DEFINED
#define _SIZE_T_DEFINED
 #define _SIZE_T_DEFINED_
 using std::size_t;
#endif
#ifndef _TIME_T_DEFINED
#define _TIME_T_DEFINED
 #define _TIME_T_DEFINED_
 using std::time_t;
#endif
#ifndef _TM_DEFINED
#define _TM_DEFINED
 #define _TM_DEFINED_
 using std::tm;
#endif

// C99 functions in time.h
using std::asctime;
using std::clock;
using std::ctime;
using std::difftime;
using std::gmtime;
using std::localtime;
using std::mktime;
using std::strftime;
using std::time;

#else /* __cplusplus not defined */
:: End of segment that is only in time.h
:endsegment

:include owrtlink.sp

:segment LINUX | QNX
:include systypes.sp

:endsegment
:segment CNAME
:include cpluspro.sp

:endsegment
:include pshpackl.sp

:include null.sp

#define CLOCKS_PER_SEC   1000

:segment DOS | RDOS
::
:: Begin of extension section
::
:include ext.sp

#define CLK_TCK          1000

:include extepi.sp

:elsesegment LINUX | QNX
:include extunix.sp

#define CLK_TCK          1000

/*  Clock types */
#define CLOCK_REALTIME              0
:segment LINUX
#define CLOCK_MONOTONIC             1
#define CLOCK_PROCESS_CPUTIME_ID    2
#define CLOCK_THREAD_CPUTIME_ID     3
#define CLOCK_MONOTONIC_RAW         4
:endsegment

/* Timer settime flags */
#define TIMER_ABSTIME           0x0001
#define TIMER_ADDREL            0x0100
#define TIMER_PRESERVE_EXEC     0x0200
#define TIMER_AUTO_RELEASE      0x0400

:include extepi.sp

:segment QNX
:include ext.sp

/* QNX msg notify types */
#define _TNOTIFY_SLEEP          0
#define _TNOTIFY_PROXY          1
#define _TNOTIFY_MESSENGER      1
#define _TNOTIFY_SIGNAL         2

/* ticksize flags */
#define _TICKSIZE_STANDARD      0
#define _TICKSIZE_CLOSEST       1
#define _TICKSIZE_EXTERNAL      2

:include extepi.sp

:endsegment
::
:: End of extension section
::
:endsegment
:include wchar_t.sp
:include size_t.sp

:include time_t.sp

:include clock_t.sp

:keep DECLARE_STRUCT
:include tm.sp
:remove DECLARE_STRUCT
:segment DOS | LINUX | QNX

:include extc99po.sp
:include timespec.sp
:include extepi.sp
:endsegment

::
:: Begin of extension section
::
:segment LINUX | QNX
:include extunix.sp

:include timer_t.sp
:include clockidt.sp

/* 1003.4/D12 Clocks and Timers */
#ifndef __POSIX_TIMERS
#define __POSIX_TIMERS

struct itimerspec {
    struct timespec it_interval;
    struct timespec it_value;
    int             notify_type;            /* Uses native int size */
    int             timer_type;
    long            data;                   /* Used by gettimer only */
};

struct itimercb {
    struct /*event*/ {
        long  evt_value;              /* Will hold a proxy or a signal */
    }    itcb_event;
    int  itcb_count;
};

#endif /* __POSIX_TIMERS */

struct sigevent;               /* for C++ */

:include extepi.sp

:endsegment
::
:: End of extension section
::
:include nsstd.sp
_WCRTLINK extern char       *asctime( const struct tm *__timeptr );
_WCRTLINK extern clock_t    clock( void );
_WCRTLINK extern char       *ctime( const time_t *__timer );
_WMRTLINK extern double     difftime( time_t __t1, time_t __t0 );
_WCRTLINK extern struct tm  *gmtime( const time_t *__timer );
_WCRTLINK extern struct tm  *localtime( const time_t *__timer );
_WCRTLINK extern time_t     mktime( struct tm *__timeptr );
_WCRTLINK extern size_t     strftime( char *__s, size_t __maxsiz, const char *__fmt, const struct tm *__tp );
_WCRTLINK extern time_t     time( time_t *__timer );
:: Wide character version
:include ext.sp
_WCRTLINK extern size_t     wcsftime( wchar_t *, size_t, const wchar_t *, const struct tm * );
:include extepi.sp
:include nsstdepi.sp

:segment !CNAME
#define difftime(__t1,__t0)  ((double)( __t1 ) - (double)( __t0 ))

:endsegment
::
:: Begin of extension section
::
:include ext.sp
:: Wide character version
_WCRTLINK extern wchar_t    *_wasctime( const __w_tm * );
_WCRTLINK extern wchar_t    *_wctime( const __w_time_t * );
_WCRTLINK extern wchar_t    *_wstrdate( wchar_t *__buf );
_WCRTLINK extern wchar_t    *_wstrtime( wchar_t *__buf );
_WCRTLINK extern __w_size_t _wstrftime_ms( wchar_t *, __w_size_t, const char *, const __w_tm * );

_WCRTLINK extern char       *_asctime( const __w_tm *__timeptr, char *__buf );
_WCRTLINK extern char       *_ctime( const __w_time_t *__timer, char *__buf );
_WCRTLINK extern __w_tm     *_gmtime( const __w_time_t *__timer, __w_tm *__tmbuf );
_WCRTLINK extern __w_tm     *_localtime( const __w_time_t *__timer, __w_tm *__tmbuf );
:segment LINUX
_WCRTLINK extern char       *asctime_r( const __w_tm *__timeptr, char *__buf );
_WCRTLINK extern char       *ctime_r( const __w_time_t *__timer, char *__buf );
_WCRTLINK extern __w_tm     *gmtime_r( const __w_time_t *__timer, __w_tm *__tmbuf );
_WCRTLINK extern __w_tm     *localtime_r( const __w_time_t *__timer, __w_tm *__tmbuf );
:endsegment
_WCRTLINK extern char       *_strdate( char *__buf );
_WCRTLINK extern char       *_strtime( char *__buf );
:: Wide character version
_WCRTLINK extern wchar_t    *__wctime( const __w_time_t *, wchar_t * );
_WCRTLINK extern wchar_t    *__wasctime( const __w_tm *, wchar_t * );
:include extepi.sp

:segment LINUX | QNX
:include extunix.sp

_WCRTLINK extern int    nanosleep( const struct timespec *__rqtp, struct timespec *__rmtp );

_WCRTLINK extern int    timer_create( clockid_t __clock_id, struct sigevent *__evp, timer_t *__tmr );
_WCRTLINK extern int    timer_delete( timer_t __timerid );
_WCRTLINK extern int    timer_getoverrun( timer_t __timerid );
_WCRTLINK extern int    timer_gettime( timer_t __timerid, struct itimerspec *__value );
_WCRTLINK extern int    timer_settime( timer_t __timerid, int __flags, struct itimerspec *__value, struct itimerspec *__ovalue );

_WCRTLINK extern int    clock_gettime( clockid_t __clock_id, struct timespec *__tp );
_WCRTLINK extern int    clock_getres( clockid_t __clock_id, struct timespec *__res );
:segment QNX
_WCRTLINK extern int    clock_settime( clockid_t __clock_id, struct timespec *__tp );
:elsesegment LINUX
_WCRTLINK extern int    clock_settime( clockid_t __clock_id, const struct timespec *__tp );
_WCRTLINK extern int    clock_nanosleep( clockid_t __clock_id, int __flags, const struct timespec *__req, struct timespec *__rmdr );
:endsegment

:include extepi.sp

:endsegment
:segment QNX
:include ext.sp

_WCRTLINK extern int    clock_setres( clockid_t __clock_id, struct timespec *__res );

_WCRTLINK extern int    qnx_getclock( pid_t __pid, clockid_t __clock_id, struct timespec *__tp );
_WCRTLINK extern int    qnx_setclock( pid_t __pid, clockid_t __clock_id, struct timespec *__tp );
_WCRTLINK extern int    qnx_clock( nid_t __nid, clockid_t __clock_id, struct timespec *__tp );

_WCRTLINK extern long   qnx_timerperiod( long );
_WCRTLINK extern long   qnx_ticksize( long __nsec, int __flags );
_WCRTLINK extern int    qnx_adj_time( long, long, long *, long * );

:include extepi.sp

:endsegment
:segment LINUX | QNX
:include extunix.sp

:endsegment
_WCRTLINK extern void   tzset( void );
_WCRTLINK extern char   **__get_tzname_ptr( void );
#ifdef __FUNCTION_DATA_ACCESS
 #define tzname         (*__get_tzname_ptr())
#elif defined(__SW_BR) || defined(_RTDLL)
 #define tzname  tzname_br
#endif
_WCRTDATA extern char * _WCDATA tzname[2];  /*  time zone names */

:segment LINUX | QNX
:include extepi.sp

:include ext.sp

:endsegment
_WCRTLINK extern long   *__get_timezone_ptr( void );
_WCRTLINK extern int    *__get_daylight_ptr( void );
#ifdef __FUNCTION_DATA_ACCESS
 #define timezone       (*__get_timezone_ptr())
 #define daylight       (*__get_daylight_ptr())
#elif defined(__SW_BR) || defined(_RTDLL)
 #define timezone       timezone_br
 #define daylight       daylight_br
#endif
_WCRTDATA extern long   _WCDATA timezone;   /* # of seconds from GMT */
_WCRTDATA extern int    _WCDATA daylight;   /* d.s.t. indicator */

:segment LINUX | QNX
:include extepi.sp

:endsegment
::
:: End of extension section
::
::::::::: Safer C :::::::::
:segment !CNAME
:include saferpro.sp

:include errno_t.sp

:include rsize_t.sp

_WCRTLINK extern errno_t    asctime_s( char *__s, rsize_t __maxsize, const struct tm *__timeptr );
_WCRTLINK extern errno_t    ctime_s( char *__s, rsize_t __maxsize, const time_t *__timer );
_WCRTLINK extern struct tm  *gmtime_s( const time_t * __restrict __timer, struct tm * __restrict __result );
_WCRTLINK extern struct tm  *localtime_s( const time_t * __restrict __timer, struct tm * __restrict __t );

:: Wide character version
_WCRTLINK extern errno_t    _wasctime_s( wchar_t *__s, rsize_t __maxsize, const struct tm *__timeptr );
_WCRTLINK extern errno_t    _wctime_s( wchar_t *__s, rsize_t __maxsize, const time_t *__timer );

:include saferepi.sp

:endsegment
::::::::: Safer C :::::::::
:include poppack.sp

:segment CNAME
:include cplusepi.sp
:elsesegment
#endif /* __cplusplus not defined */
:endsegment

#endif
