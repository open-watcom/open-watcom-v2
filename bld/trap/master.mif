#
# Common stuff between trap file and server implementations
#
# Macros:
#       target_sys      - Name of the operating system the executable is
#                         being built for. Look at the "comp_*" macros
#                         below for the list of acceptable names (required).
#       srv             - Name of the remote link that the server/trap file
#                         is implementing. Use "lcl" for "STD" trap
#                         files (required).
#       target_cpu      - Name of the CPU that the server/trap is being
#                         built for (x86,axp,ppc,etc).
#       name            - Root name of the server/trap file. A name is
#                         created from the "srv" macro if this is not
#                         defined (optional).
#       extra_objs      - names of extra object files to be included in the
#                         the link (optional, but I can't think of a case
#                         where it wouldn't be defined).
#       extra_dobjs     - names of extra object files to be included in the
#                         debugging version. If not defined, extra_objs is
#                         used (options).
#       extra_incs      - A list of extra directories to search for include
#                         files (optional).
#       extra_srcs      - A list of extra directories to search for source
#                         files (optional).
#       extra_libs      - A (space separated) list of extra libraries to
#                         include in the link (optional).
#       extra_cflags    - Extra C compiler flags (optional).
#       extra_aflags    - Extra wasm flags (optional).
#       extra_linker    - Extra linker directives (optional).
#       extra_deps      - Extra dependencies for executable (optional).
#       extra_cmds      - Extra commands to be executed when creating
#                         the executable (optional).
#       resource_file   - root name of a resource file (optional).

proj_name = trap

!ifndef trap_autodepends
trap_autodepends = .AUTODEPEND
!endif
#
# optimization for size
# only 16-bit DOS executable
#
!ifeq host_os dos
!ifeq host_cpu i86
dft_oflags = -oais
!endif
!endif

trap_nofpu = 1

suppress_zc = 1

!ifndef memory_model_i86
memory_model_i86 = c
!endif

additional_clean = $(target) *.gh

additional_clean_qnx = usage.u

!ifdef test
!ifndef remote_link
!error test version can be build only for remote link
!endif
!endif

# target_sys
##############
target_sys_os2_386 = os2v2
!ifdef target_sys_$(host_os)_$(host_cpu)
target_sys = $(target_sys_$(host_os)_$(host_cpu))
!else ifndef target_sys
target_sys = $(host_os)
!endif

# os_prefix
##############
os_prefix_linux = lnx
os_prefix_nlm3  = nlm
os_prefix_nlm4  = nlm
os_prefix_nlm5  = nlm
os_prefix_os2v2 = os22
os_prefix_tnt   = pls
!ifdef os_prefix_$(target_sys)
os_prefix = $(os_prefix_$(target_sys))
!else
os_prefix = $(target_sys)
!endif

# os_subdir
##############
os_subdir_nov_386 = nlm
os_subdir_os2_386 = os2v2
!ifdef os_subdir_$(host_os)_$(host_cpu)
os_subdir = $(os_subdir_$(host_os)_$(host_cpu))
!else
os_subdir = $(host_os)
!endif

# srv_prefix
##############
srv_prefix = $(srv)

# name
##############
!ifeq srv lcl
! ifndef name
name = std
! endif
!else ifdef name
!else ifeq which SERVER
! ifdef remote_link
!  ifeq target_sys win
name = $(srv_prefix)servw
!  else
name = $(srv_prefix)serv
!  endif
! else
name = $(srv_prefix)help
! endif
!else
name = $(srv)
!endif

!ifdef test
xname = z$(name)
!else
xname = $(name)
!endif

# stack check handling
#######################
!ifeq which TRAP
nocheckstack = 1
!endif

!include cproj.mif
!include defrule.mif
!include deftarg.mif

!ifeq which SERVER
!include $(trap_dir)/serv.mif
!else
!include $(trap_dir)/trap.mif
!endif

dig_arch = $(target_cpu)

!include $(dig_dir)/digcli.mif

# cflags stuff
###############
extra_cpp_flags = -D$(which) $(dig_arch_cpp_flags) -DBLDVER=$(bld_ver) $(extra_cppflags)
!ifndef test
!ifdef builtin_trap
extra_cpp_flags += -DBUILTIN_TRAP_FILE
!endif
!endif
!ifdef japanese
extra_cpp_flags += -DJAPANESE
!endif
!ifeq debug 2
!ifeq host_os nov
extra_cpp_flags += -DDEBUG_ME
!endif
!endif
!ifdef gui
extra_cpp_flags += -DTRAPGUI
!endif

extra_cppflags_nlm5 = -D__NW50__ -D_USE_NEW_KERNEL -D__NETWARE_LIBC__
extra_cppflags_nlm4 = -D__NW40__
extra_cppflags_nlm3 = -D__NW30__
extra_cppflags_ads  = -DACAD
extra_cppflags_cw   = -DCAUSEWAY
extra_cppflags_hx   = -DHX
extra_cppflags_pls  = -DPHARLAP
extra_cppflags_ped  = -DPHARLAP
extra_cppflags_rsi  = -DDOS4G
!ifeq srv lcl
extra_cpp_flags += $(extra_cppflags_$(target_sys))
!else ifeq host_os nov
extra_cpp_flags += $(extra_cppflags_$(target_sys))
!else
extra_cpp_flags += $(extra_cppflags_$(srv))
!endif

extra_c_flags += $(extra_cflags)
!ifeq which TRAP
extra_c_flags += -zlf
!endif
!ifeq target_sys ads
extra_c_flags += -3s
!endif
!ifeq host_os nov
extra_c_flags += -3s
!endif

!ifeq which TRAP
extra_c_flags_i86 = -zu
!ifndef test
extra_c_flags_win_i86 = -bd
!endif
!endif

# aflags stuff
###############
extra_a_flags += $(model_switch_$(host_cpu)) -D$(which)
!ifeq target_sys ads
extra_a_flags += -3s
!endif
!ifeq host_os nov
extra_a_flags += -3s
!endif
!ifeq srv lcl
extra_a_flags += $(extra_cppflags_$(target_sys))
!else ifeq host_os nov
extra_a_flags += $(extra_cppflags_$(target_sys))
!else
extra_a_flags += $(extra_cppflags_$(srv))
!endif

extra_a_flags_misc7086 = -fpi87
extra_a_flags_misc7386 = -fpi87

# lflags stuff
###############
extra_lflags_nlm5 = module libc
extra_lflags_nlm4 = module clib
extra_lflags_nlm3 =
extra_l_flags_nov = debug all debug Novell $(extra_lflags_$(target_sys))

trperr_h = _err.gh
jtrperr_h = _jerr.gh

all : .SYMBOLIC $(trperr_h) #$(jtrperr_h)
    @%make $(target)

rcui_inc_dirs = -I"$(trap_dir)/h"

$(trperr_h) : $(trap_dir)/h/trapmsg.h $(trap_dir)/h/trap.msg $(__MAKEFILES__)
    @%make echo_cpp
    $(cpp) $(rc_ui8_flags) $(rc_ui_inc_path) $[@ -o$@

$(jtrperr_h) : $(trap_dir)/h/trapmsg.h $(trap_dir)/h/trap.msg $(__MAKEFILES__)
    @%make echo_cpp
    $(cpp) $(rc_ui8_flags) -DJAPANESE $(rc_ui_inc_path) $[@ -o$@

./mknver.exe: $(watcom_dir)/c/mknver.c $(watcom_dir)/h/banner.h $(__MAKEFILES__)
    @%make echo_bldccl
    $(bld_ccl) $[@ $(bld_cclflags) $(bld_ldflags)

nversion.tmp: ./mknver.exe $(__MAKEFILES__)
    @%make echo_execute
    $(noecho)$[@ $@

!ifndef extra_dobjs
extra_dobjs = $(extra_objs)
!endif

extra_deps_nov = nversion.tmp

dbg_libs_dos = dbgstr.lib

!ifdef remote_link
remote_objs = &
    $($(which)_remote_objs) &
    packet.obj &
    $(srv)link.obj &
!endif

!ifeq debug 0
objs = $(extra_objs) $($(which)_common_objs) mxutil.obj $(remote_objs)
!else
objs = $(extra_dobjs) $($(which)_common_objs) mxutil.obj $(remote_objs)
!endif

libs = $(extra_libs) $(dbg_libs_$(host_os))

$(target) : $(extra_link_res_$(host_os)) $(objs) $(libs) $(resource_file) $(extra_deps_$(host_os)) $(__MAKEFILES__)
!ifndef __WATCOM_TOOLS__
    @%make echo_link
    $(cl) $(clflags) $(objs) $(libs) $(ldflags)
!else
    $(noecho)%create $^&.lnk
    @%append $^&.lnk $(mode_lflags)
    @%append $^&.lnk op elim
    @%append $^&.lnk name $@
    @%append $^&.lnk $(sys_$(target_cpu)_$(target_sys))
    @%append $^&.lnk $(proj_l_flags)
    @for %i in ($(objs)) do @%append $^&.lnk file %i
    @for %i in ($(libs)) do @%append $^&.lnk library %i
    @%append $^&.lnk $(extra_linker)
    @%make echo_link
    $(linker) @$^&.lnk
!endif
!ifdef resource_file
    @%make bind_res
!endif
!ifdef extra_cmds
    $(extra_cmds)
!endif

libtarg_objs = dbgstr.obj
libtarg_name = dbgstr
!include libtarg.mif

!ifdef resource_file
$(resource_file) : $(trap_dir)/common/servw.rc
    @%make echo_rc
    $(rc) $(rc_ui8_encoding) $(rc_flags) $(inc_path) $[@ -fo=$@
!endif

inc_subdir_nwsdk_nlm5 = &
    -I"$(nwoss_dir)/nw5/h" &
    -I"$(nwoss_dir)/nw5/src"
inc_subdir_nwsdk_nlm4 = &
    -I"$(nwoss_dir)/nw4/h" &
    -I"$(nwoss_dir)/nw4/src"
inc_subdir_nwsdk_nlm3 = &
    -I"$(nwoss_dir)/nw3/h" &
    -I"$(nwoss_dir)/nw3/src"
inc_dirs_nwsdk_nov = &
    $(inc_subdir_nwsdk_$(target_sys)) &
    -I"$(nwoss_dir)/common/h"

inc_dirs += -I. -I"../h" $(extra_incs) -I"$(trap_dir)/common/$(os_subdir)"
inc_dirs += -I"$(trap_dir)/common" -I"$(trap_dir)/h"
inc_dirs += -I"$(dig_dir)/h" $(inc_dirs_nwsdk_$(host_os))

.c: ../c;../../c;$(trap_dir)/common/$(os_subdir);$(trap_dir)/common;$(trap_dir)/c;$(extra_srcs)
.cpp: ../c;../../c;$(trap_dir)/common/$(os_subdir);$(trap_dir)/common;$(trap_dir)/c;$(extra_srcs)
.asm: ../asm;../../asm;$(trap_dir)/common/$(os_subdir);$(trap_dir)/common;$(extra_srcs)

rc_inc_dirs = -I"$(trap_dir)/common"

usage.u : ../$(srv_prefix).sp $(__MAKEFILES__)
    @%make echo_wsplice
    $(noecho)*wsplice -u $[@ $@
