WATCOM IDE DEVELOPMENT ENVIRONMENT              DRAFT
====================================            =====

I. Overview
-----------
    IDE addresses the problem of managing all the files and tools
    that a programmer uses when developing a project.  This includes
    all the source files, include files, libraries, compiler(s), linkers,
    preprocessors etc. that are used.

    IDE has a graphical interface that makes it easy to visualize the
    make up of a project.  A single IDE session shows a *project*.  If
    the project consists of a number of components (such as 2 executables
    and 1 library), these are each shown as a *target* sub-windows on the
    project window.  Each target window shows the files that are needed
    to construct the target and is associated via its filename extension
    with a *rule* that describes the construction mechanism.  For example,
    a filename with the extension .exe may be associated with the rule
    for constructing 16Bit Windows executables, or a filename with the
    extension .lib may be associated with the rule for constructing static
    libraries.  Different projects can refer to the same target.  If they
    do, the target is shared and can be manipulated via either project,
    with changes made through one effecting the other.

    IDE itself is a collection of programs that manage the various
    files and tools that are used to create the target libraries and
    executables.  It creates makefile(s) from the information in the
    target descriptions and invokes WMAKE to construct the targets
    themselves.  Via a configuration file, IDE contains build-in
    knowledge of the WATCOM compilers, editor and program browser and
    all their switches.  The open architecture of the configuration file
    makes it is easy to add new tools and file types.

II. A Quick Tutorial
------------------
    This tutorial will take you through creating and executing a simple
    C program under MS Windows.  It will give you an understanding of the
    basic concepts of IDE and the steps involved in project development.

    First, start the IDE environment.  Under MS Windows, this is done
    by double-clicking on the IDE icon in the program manager window.

    1. Defining a Project.

        Define a project by selecting the *File/New project...* menu item.
        When asked for a project name, enter the name *\mydir\test.wpj*
        where mydir is the desired root directory of the project.  The
        project description will be stored in this file, and IDE will make
        it the current-working-directory during your session.  Press *OK*
        and IDE will ask for a target name.  Here, type *test.exe* in the
        first field to specify the name of your target program in the project.
        Next. choose the type of target from a list of target types that 
        IDE knows how to build.  Since you will wish to execute the
        program we are about to write, choose a target type that can run
        on your machine.  If you are running the MSWindows version of IDE,
        choose *16Bit Windows Executable*.  If you are running the OS2/PM
        version, choose *32Bit OS2/PM Executable*.  Then press *OK*.
        You will now see the *target sub-window* for the test.exe target.
        (Note: If the project were to contain more than one target, each
        would have to reside in a different directory!)

    2. Adding a source file.

        Next, add a source file to the list of items that make up test.exe.
        Choose the menu item *Sources/New source...*, and enter the filename
        *test.c*.  (Note: You can do this either by choosing from the menu
        bar or by positioning the mouse over the files list area and
        clicking the right mouse button.  IDE displays a *popup menu* from 
        which you can choose the desired action.)  When you have entered the 
        source file name, press *OK*.  The filename test.c now appears in the
        list of items, followed by the characters (n/a).  This means that 
        the file does not yet exist on the disk.

        Next, edit/create the source file by selecting *test.c* (click with
        the left mouse button) and then choosing the menu item 
        *Sources/Edit text*. (Note: Editing can also be invoked by 
        double-clicking on the filename.)  This action invokes the WATCOM 
        Editor to edit the file. Enter the following source for test.c using 
        the editor.

            #include <stdio.h>

            void main()
            {
                int i;
                for( i=0; i<10; i++ ) {
                    printf( "Value is %d.\n", i )
                }
            }

        (Note: we have intentionally left off the semi-colon that should
        appear at the end of the printf statement!)

        Exit the editor by choosing the menu item *File/Exit*.

        Since IDE does not know that the editor has created the file,
        it still shows it as (n/a).  You can make sure that IDE is in
        tune with the state of all the disk files by choosing the menu
        item *Window/Refresh*.  This updates the source file list for the
        target.

    3. Making the target.

        Since this is the only file in the target, you are now ready to
        compile and link it.  Do this by selecting the *Targets/Make* menu
        item.  IDE will now construct a makefile based on its knowledge of
        the target and construction rules, and then invoke the WMAKE utility
        to create test.exe.  The output of this procedure is displayed in the
        IDE Log window.  Since we made an intentional error in the source
        file, errors are encountered during the make and the error message(s) 
        are shown in the log window.  You can edit the offending source file
        by selecting the error message (left mouse button) and then selecting
        the *Log/Edit log* menu item. (Note: Editing can also be invoked by
        double-clicking on the error message.) An explanation of the error
        can be displayed by choosing the *Log/Help log* menu item.  Correct
        the error using the editor, exit as before, and choose *Targets/Make*
        again.  Repeat this procedure until you have an error-free compile
        and link and the program test.exe has been created.

    4. Executing the target program.

        You are now ready to execute the program you have developed.  Do this
        by choosing the *Targets/Run* menu item.  IDE will execute the 
        program test.exe.

        The program you have written uses the default-Windows support built
        in to the WATCOM C library.  As such, the output of your program is
        shown in a window.  To close this window, select the menu item
        *File/Exit*.

    5. Debugging the target program.

        Since this is a simple program, you probably have no need to debug it
        using the WATCOM Debugger.  However, lets go though the steps so that
        you will know what to do on your own, more complex programs.

        To debug a program, first it must be compiled to include debugging
        information.  IDE maintains two sets of switches for each target
        in a project.  These are known as the *Development Switches* and the
        *Release Switches*.  Each target can be placed in development or
        release mode using the menu items *Targets/Setup target/Use
        Development Switches* or *Targets/Setup target/Use Release Switches*.

        By default, IDE has placed your target in development mode and
        debugging information to be included by the compilers and linkers.
        To invoke the debugger, choose the *Targets/Debug* menu item.  IDE
        will invoke the debugger.  Step through the code using the 
        *Run/Trace over* menu item until the message *Task completed* is
        encountered.  Then choose *File/Exit* to terminate the debugging
        session.

        To override any of the switches for the source compilers or target
        linkers, select the appropriate target and/or source file and choose
        the menu item *Sources/Setup source/Switches* or *Targets/Setup
        target/Switches* respectively. A dialog window is displayed that
        shows all the switches available for the compiler or linker.
        Press the *>>* button until you are at the desired screen and set
        the switches the way you want them.  Page around the screens making
        changes and when you are done, press *OK*.

    6. Saving the project and terminating the session.

        You can now exit the IDE session by choosing the menu item
        *File/Exit*.  If you have not already saved your project, you will
        be prompted to do so.  Choose *Yes*, and the session will end.

    7. Review of what happened.

        In this tutorial, you created a project called test.wpj, which
        was composed of one target called test.exe.  The target was a
        16Bit Windows executable.  You used the WATCOM Editor to enter
        and edit the source text in a file called test.c and then compiled
        and linked it into an executable program using the WMAKE utility,
        the WATCOM C Compiler and the WATCOM Linker.  You executed it both
        directly and under the control of the WATCOM Debugger.

        When you saved the project, IDE created the following permanent
        files.  Test.wpj describes the screen layout and refers to a file
        called test.tgt.  Test.tgt describes the target executable test.exe
        and all switches required to link it.  It also describes test.c,
        and switches required to compile it.

        When you pressed the *Make* button, IDE created a number of
        temporary makefiles (called *.mk and *.mak).

III. Reference
-------------
    1. Methodology.

        IDE deals with an entity called a 'project', which consists of
        a number of 'targets'.  A project is represented on disk by a
        project descriptor file having the file extension of 'wpj', while
        a target is represented on disk by a target descriptor file having
        the file extension of 'tgt'.  Each target descriptor file must
        reside in a different disk directory.  This directory is considered
        the target directory, and all compiler and linker executions for
        that target take place there.

            (Note: You *cannot* safely edit either the .wpj or
            the .tgt files with a text editor!)

        The project descriptor file (.wpj) describes a project.  It contains
        the names of all the target descriptor files that make up the project
        plus certain housekeeping information about the IDE session.

        Each target descriptor file (.tgt) describes a target within a
        project.  It contains the name and type of the target program,
        a reference to a *Rule* defined in the IDE configuration file
        (ide.cfg) describing how to build it, and a list of relevant
        switches used by the rule.  In addition, it contains the names of
        all the files used to construct the target program, references
        to similar rules for compiling them, and relevant switches.  Other
        housekeeping data is also kept in the target descriptor file.

        In constructing targets, IDE references a list of *Rules* that
        are defined in a configuration file called ide.cfg.  Among other
        things, each rule defines a command line used to do the construction,
        and a list of actions that can be performed on the target program
        (e.g., make, run, debug) or on the files in the item list (e.g.,
        make, edit).  Additionally, rules refer to *Tools* that define
        the command line switches settable by the programmer using the
        IDE environment.

        Once a project and one or more targets is defined, IDE can create
        a makefile and invoke the WMAKE utility to construct the target
        program.  These steps are described in the following paragraphs.

        When the Make action is selected, IDE first constructs a set of
        makefiles usable by the WATCOM WMAKE utility program.  The root
        makefile is created in the project directory and other target
        makefiles are created in each of the target directories.  Then
        IDE executes WMAKE in a batch program environment associated
        with the current platform.

        Under MS Windows, IDE starts a DOS program dosserv.exe 
        (via batchbox.pif). It uses these to run the WMAKE utility and 
        capture its output into the log window.  Under MS Windows, DOS 
        versions of WMAKE and all the compilers etc, are used.
        (Make sure the setup has been done as described in appendix C.)

        Under OS2/PM, IDE follows a similar strategy.  It uses the
        batserv.exe utility (which must be running) to execute the
        WMAKE utility and capture its output into the log window.  Under
        OS2/PM, OS2 versions of WMAKE and all the compilers etc, are used.
        (Make sure the setup has been done as described in appendix C.)

    2. IDE Development Environment (ide.exe):

        The main program in the IDE suite of programs is ide.exe.
        It is used to define the .wpj and .tgt files, create makefiles,
        invoke WMAKE and other tools, invoke the editor and browser when
        requested, and otherwise apply the tools described in the IDE
        configuration file (ide.cfg).

        a) Command line switches.

            ide.exe is invoked using the following command line:

                ide [switches] [filename.wpj]

            where:

                [switches] is zero or more of the following:

                        +c filename     - this defines an alternate file to
                                          be used in place of ide.cfg.
                        -b              - this disables the batch feature
                                          and is not very useful.
                        +d              - this is a debugging switch and
                                          periodically displays debugging
                                          information during the execution
                                          of ide.exe.
                [filename.wpj] is an optional project descriptor file.

        b) Screen layout.

            The main screen for ide.exe describes one project, with the
            project name displayed in the title bar of the main window.
            It can contain a number of sub-windows which resemble the
            Windows MDI interface and can be iconisized, cascaded, tiled,
            etc., using the close box and the *Window* menu items.

            Each sub-window in the main screen represents a target in the
            project, with the name of the target program or library shown
            in the title bar, relative to the project file directory.  There
            can be only one target per directory.

            Each target sub-window contains a list of source files that
            are required to construct the target program.  These names are
            relative to the target directory.

            The menu lists called *Targets* and *Sources* operate on the
            current target sub-window.  They can be invoked from the menu
            bar or activated with the right mouse button. Some of the menu
            items in these lists are present for all targets and sources, and
            some exist only for certain file types.  These optional menu
            items are called *Actions* and are defined as part of the rules
            associated with the target and its source files.

            The target sub-window can also contain buttons that represent
            certain additional actions that can be performed on the target.
            They are also called *Actions* and are defined using the
            *Button* option as part of the rule associated with the target.

            The IDE Log windows also appears as a sub-window. It captures
            and displays output lines from the various tools described in
            the ide.cfg file.

        c) Menu Bar and Menu items.

            The IDE menu bar and menu items are listed here for reference.
            Complete descriptions follow.

            File
                New project
                Open project
                Save project
                Save project as
                Close
                Show tool bar
                Attach configuration
                Before
                After
                Exit
            Actions
                *'action'
            Targets
                New target
                Remove target
                Rename target
                Setup target
                    Switches
                    Show make command
                    Before
                    After
                    Use autodepend
                    Use development switches
                    Use release switches
                    *'action'
                Mark target for remake
                Attach target
                *'action'
            Sources
                New source
                Remove source
                Rename source
                Setup source
                    Switches
                    Show make command
                    *'action'
                Mark source for remake
                *'action'
            Log
                Edit log
                Help log
                Cancel log
            Window
                Refresh
                Cascade
                Tile horizontally
                Tile vertically
                Arrange icons
                *windows*
            Help
                Contents
                Search for help on
                How to use Help
                About IDE

            The following paragraphs describe the menu items available in
            ide.exe.

            File/New Project
                - creates a new project.
                - if there already is a project that has not been saved,
                  you will be asked to save it.
                - uses a dialog to let you specify the new project name.
                - changes the cwd to match the newly created project.
            File/Open project
                - opens/loads an existing project from disk.
                - if there already is a project that has not been saved,
                  you will be asked to save it.
                - uses a file-open dialog to let you specify the name;
                  allows browsing of disk directories.
                - changes the cwd to match the newly loaded project.
            File/Save project
                - saves a copy of the currently loaded project to disk.
            File/Save project as
                - saves a copy of the currently loaded project to disk,
                  allowing you to give a new name.
                - uses a file-saveas dialog to let you specify the name;
                  allows browsing of disk directories.
                - changes the project name to match the newly saved project
                  and changes the cwd to match.
            File/Close
                - close the current project
                - if the current project has not been saved,
                  you will be asked to save it.
            File/Show tool bar
                - if not checked, displays the tool bar; otherwise
                  hide it.
            File/Attach configuration
                - prompts for a new configuration file name and
                  load that configuration.
                - if the current project has not been saved,
                  you will be asked to save it. 
            File/Before
                - allows you to enter arbitrary commands that will
                  be placed in the makefile with the .before keyword.
            File/After
                - allows you to enter arbitrary commands that will
                  be placed in the makefile with the .after keyword.
            File/Exit
                - exit the IDE session.
                - if there already is a project that has not been saved,
                  you will be asked to save it.

            Actions/'action'
                - invoke actions defined for the project as a whole.
                - there can be a number of such menu items

            Targets/New target
                - create a new target in the project.
                - uses a dialog to allow you to enter the new target name.
            Targets/Remove target
                - remove a target from the project.
            Targets/Rename target
                - give the target program a new name or correct a spelling
                  mistake.
            Targets/Setup target/Switches
                - set linker switches for the target
                - switches that you see are defined in ide.cfg for
                  the related tool.
            Targets/Setup target/Show make command
                - display the actual command that will be used in
                  the makefile to make the target.
            Targets/Setup target/Before
                - allows you to enter arbitrary commands that will
                  be executed before the target is made.
            Targets/Setup target/After
                - allows you to enter arbitrary commands that will
                  be executed after the target is made.
            Targets/Setup target/Use autodepend
                - toggles the autodepend setting.  If checked, the makefile
                  uses the .autodepend feature of WMAKE.
            Targets/Setup target/Use development switches
                - if checked, the development switch settings are used
            Targets/Setup target/Use release switches
                - if checked, the release switch settings are used
            Target/Setup target/'action'
                - set switches for each action defined for the rule
                  and which has settable switches as defined in ide.cfg.
                - there can be a number of such menu items
            Target/Mark target for remake
                - change the timestamp of the target file back to Jan 1,1980
                  so as to force re-linking on the next Make action.
            Target/Attach target
                - attach an existing .tgt file to this project
                - uses a dialog to allow you to enter the name of the
                  target descriptor file; allows browsing of the disk
                  directories.
            Target/'action'
                - invoke actions defined for the associated rule that are
                  *not* specified as *Button* actions.
                - there can be a number of such menu items

            Sources/New source
                - add a new source file to the list of files that make
                  up the current target.
                - a dialog is used to let you specify the file name, and
                  a browse option lets you browse the disk directories.
            Sources/Remove source
                - remove a source file from the target.
            Sources/Rename target
                - give the file item a new name or correct a spelling
                  mistake.
            Sources/Setup source/Switches
                - set compiler switches for the current source file.
                - switches that you see are defined in ide.cfg for
                  the related tool.
                - if the current file is a header (e.g., >>> .c <<<),
                  the switch settings apply to all the files of that
                  type.
            Sources/Setup source/Show make action
                - display the actual command that will be used in
                  the makefile to make the result file for this source.
            Sources/Setup source/'action'
                - set switches for each action defined for the rule
                  and which has settable switches as defined in ide.cfg.
                - there can be a number of such menu items
            Sources/Mark source for remake
                - change the timestamp of the result file back to Jan 1,1980
                  so as to force re-compiling on the next Make action.
            Sources/'action'(both source and result)
                - invoke actions defined for the rule associated with the
                  file item.
                - there can be a number of such menu items
                - includes both the rule associated with the file item
                  and the rule associated with the result file

            Log/Edit log
                - scan the currently selected log message for a filename
                  (according to the scan patterns in ide.cfg) and invoke
                  the editor on that file.
            Log/Help log
                - scna the currently selected log message for an error code
                  (according to the scan patterns in ide.cfg) and invoke
                  the help processor on that error code.
            Log/Cancel log
                - cancel the process that is executing under the control of
                  the log window.

            Window/Refresh
                - scans disk directories to make sure information displayed
                  in the file item lists is accurate. (e.g., r/w, r/o, n/a)
            Window/Cascade
                - changes the screen locations of the non-iconisized target
                  sub-windows to a cascaded format.
                - relocates iconisized sub-windows.
            Window/Tile horizontally
                - changes the screen locations of the non-iconisized target
                  sub-windows to a horizontally tiled format.
                - relocates iconisized sub-windows.
            Window/Tile vertically
                - changes the screen locations of the non-iconisized target
                  sub-windows to a vertically tiled format.
                - relocates iconisized sub-windows.
            Window/Arrange
                - relocates iconisized target sub-windows

            Help/Contents
                - (not available at this time)
            Help/Search for help on
                - (not available at this time)
            Help/How to use Help
                - (not available at this time)
            Help/About IDE
                - display a dialog describing the Version of IDE
                  that you are currently running.

    4) Batch IDE (ide2make.exe):

        A supplementary program in the IDE suite of programs is ide2make.exe.
        It is run from the DOS command line and takes as input an existing
        .wpj file or a list of existing target descriptor (.tgt) files, and
        creates the same makefiles that ide.exe creates when *Make* is
        selected.  It uses the same IDE configuration file (ide.cfg)
        that is used by ide.exe.

        Using ide2make.exe, you can create makefiles from .tgt files in
        batch mode, and then invoke WMAKE to process them.  This is handy
        if you want to develop applications using the IDE Development
        Environment, but have a need to build the target programs in some
        sort of automated, batch mode manner.

        a) Command line switches:

            ide2make.exe is invoked using the following command line:

                ide2make [*options] [*filename.tgt]

            where:

                [options] is zero or more of the following:

                -p wpjfile      - loads wpjfile.wpj (project.wpj by default).
                -c cfgfile      - loads cfgfile instead of ide.cfg.
                -d              - generate makefiles using development switch set.
                -r              - generate makefiles using release switch set.

                [filename.tgt] is one or more target descriptor files to
                                be used to create the makefiles.
        b) Example:

            For example, to make the target program developed in the first
            tutorial above, use the following command lines.

            ide2make -p \mydir\test.wpj
            wmake -f test.mk


Appendix A: IDE and Batch IDE configuration file (ide.cfg)
----------------------------------------------------------

    This appendix describes the syntax of the commands used in the
    IDE configuration file (ide.cfg).  The example listing included
    is representative of those found in the actual ide.cfg file included
    in the distribution.

    There are 4 basic statements in the file:

        Tool
        Rule
        Project
        MsgLog

    First in the file are a number of *Tool* statements that define
    compilers, linkers, etc., and their associated sets of switches.
    These are used in subsequent *Rule* statements and must be defined
    *before* any rule that references them.

    Next in the file are a number of *Rule* statements that describe how
    files with various file extensions are to be processed by the previously
    defined tools.

    Next, there is one *Project* statement that defines certain
    parameters associated with the IDE session.

    Finally, there is one *MsgLog* statement that defines the patterns
    needed to process the IDE Log window.

    When describing the statements below, the following conventions are
    used.  If a line begins with an asterisk (*), it can appear zero or
    more times in the file.  If a symbol begins with a capital letter, it
    is a keyword and must appear as shown.  If a symbol begins with a
    lower-case letter, it should be substituted with a character string
    according to the associated description.  Such character strings must
    be enclosed in quotation marks if they contain spaces or commas.

    1) Tool statement--------------------------------------------------------

    *Tool tooltag toolname
        *IncludeTool tooltag
        *Family [famname]
         {CSwitch -1|0|1, mask, [swtag], switch, [ON|OFF]*
         {C2Switch -1|0|1, mask, [swtag], switch-on, switch-off, [ON|OFF]*
         {RGroup groupname
        *{RSwitch -1|0|1, mask, [swtag], switch, [ON|OFF]*
         {VSwitch -1|0|1, mask, [swtag], switch, connector, ONE|MULTI ,REQ [,value]*
         {VSwitch -1|0|1, mask, [swtag], switch, connector, ONE|MULTI [,ON|OFF, value]*
         {SwitchText swtag, swname [,swname1[,swname2]]

    Tool        - defines a tool
    tooltag     - a tag name for the tool
    toolname    - a longer name for the tool

    IncludeTool - names a tool to include as part of this tool
    tooltag     - name of the included tool

    Family      - defines a family of switches for the tool
    famname     - the name for the family of switches; each family appears
                  as a separate screen in the *Setup* dialogs under IDE.

    CSwitch     - defines a checkbox switch that can be on or off
    -1|0|1      - controls whether the switch should be displayed on the
                  left or right side if the screen in the *Setup* dialog.
                  all 0 switches must preceed all 1 switches in a family.
                  -1 value means hidden switch which is not displayed and
                  therefore cannot be changed by the user.
                  This is used in conjunction with the mask field
                  to specify system-dependent switches/parameters/commands.
    mask        - this is a string of letters and/or question-marks (?)
                  that are used to select the switch for use in a specific
                  context.  It is explained under description of the
                  *Project/Target* statement below.
    swtag       - unique tag to identify switch or blank
                  if appropriate SwitchText item is defined then it is used
                  as switch description otherwise swtag is used
                  if it is used as description then it must be short enough
                  to fit on 1/2 of the *Setup* dialog.
    swname      - a description of the switch.  It must be short enough to
                  fit on 1/2 of the *Setup* dialog. More description can
                  be specified, only first one is used for display, next
                  ones are used for translation of old project files to
                  new format based on tag/ID
    switch      - the actual switch value to be included on the generated
                  command line.
    switch-on   - the actual switch value to be included on the generated
                  command line for switch status ON.
    switch-off  - the actual switch value to be included on the generated
                  command line for switch status OFF.
    ON|OFF      - sets the initial state of the switch.

    RGroup      - defines the name given to the subsequent group of radio switches
    RSwitch     - defines a radio switch that can be on or off

    VSwitch     - defines a switch that can be associated with a character
                  string.
    value       - the default value to be supplied to the VSwitch
    ONE|MULTI   - specifies that the associated VSwitch can appear more
                  than once on the command line.
    ON|OFF      - sets the initial state of the switch.  When used with a
                  VSwitch, it also implies that the switch can appear on
                  the command line without an associated character string
                  value.

    2) Rule statement-------------------------------------------------------

    *Rule ruletag, rulename [,tooltag [,mask]]
        *[Source wildsrc*]
        *[Target wildtgt*]
        [Autodepend]
        [BrowseSwitch switch]
        *Symbol symtag, wildsym
        *Command commandtext [,mask]
        *Action actionname [,tooltag]
            Command commandtext
            [Hint hinttext]
            [Default]
            [Button]

    Rule        - defines a rule
    ruletag     - a tag name for the rule
    rulename    - a longer name for the rule
    tooltag     - the tooltag of a tool that will be used to generate
                  the switches in the subsequent *Command* definitions.
    mask        - this is a string of letters and/or question-marks (?)
                  that are used to select the rule for use in a specific
                  context.  It is explained under description of the
                  *Project/Target* statement below.

    Source      - defines files used as input to this rule
    wildsrc     - a wildcard filename (of the form *.yyy), where *yyy*
                  is the extension of the file that can be transformed
                  into one with extenstion *xxx* (see above) by executing
                  the commands defined in this rule.

    Target      - defines files produced by thos rule
    wildtgt     - a wildcard filename (of the form *.xxx), where *xxx*
                  is the extension of the file created by executing the
                  commands defined in this rule.

    Autodepend  - says that this rule creates files that support the
                  .autodepend feature of the WATCOM WMAKE utility

    Browseswitch- says that this rule creates files that support the
                  WATCOM Program Browser.
    switch      - specified the switch whose presence will cause IDE
                  to generate control files for the WATCOM Program Browser.

    Symbol      - defines a symbol that IDE will define as a set of
                  file names for use in the subsequent *Command* definitions.
    symtag      - the name for the symbol
    wildsym     - a wildcard filename (of the form *.zzz), where *zzz*
                  is the extension of the files that are to be associated
                  with the symbol

    Command     - defines a command line to be part of this rule in the
                  makefile generated by IDE.
    commandtext - the actual text to be placed in the makefile rule.  If
                  the text contains the following character sequences, they
                  are expanded as follows:
                  $@            - full filename
                  $*            - full filename with no extension
                  $&            - filename with no path or extension
                  $.            - filename with no path
                  $:            - only the path of the full filename
                  $$            - a $ character
                  $(%name)      - the value of an environment variable 'name'
                  $<%name>      - the value of an environment variable 'name'
                  $<#tooltag>   - a string of switches from the named tool
                                  that match the *maskdef* of the chosen
                                  target type. (see *Project/Target)
                  $<mask>       - a string of switches that match *mask*
                  $<symtag[!][=][,][;][+]>
                                - a list of filenames associated with
                                  *symtag* as defined in a previous *Symbol*
                                  statement.  If (!) is specified, the name
                                  of the symbol is not included in the
                                  expansion.  If (=) is included, the name
                                  of the symbol (if included) is followed by
                                  an equal sign.  If either (,) or (;) or (+)
                                  are included, the filenames in the list
                                  are separated by that character, otherwise
                                  they are separated by blanks.

    Action      - defines an action associated with the rule
    actionname  - the name of the action.  This becomes the name used in
                  any menu item or button generated by IDE.
    tooltag     - the tooltag of a tool that will be used to generate
                  the switches in the subsequent *Command* definition.

    Command     - a command to be executed if this action is chosen.
    commandtext - the actual text to be executed. If the text contains
                  any of the characters shown for the *Rule/Command*
                  definition, they are treated in the way described there.
                  If the text begins with the sequence !Editor, it is passed
                  via DDE to the WATCOM Editor. If it begins with !Batch,
                  it is passed via DDE to the IDE Message Log program to
                  be run as a batch program. If it begins with !Browse, it
                  is passed via DDE to the WATCOM Program Browser.  If it
                  begins with !Make, IDE first creates a makefile and then
                  treats the command as if it began with !Batch.

    Hint        - specified hint text associated with the action.
    hinttext    - the actual text displayed as hint text by IDE when
                  this action is highlighted.  Only shown if *Button* is
                  not specified.

    Default     - says that this action is the default action in the group.
                  It will be invoked if the user double-clicks on a file
                  item that is associated with this rule.

    Button      - says that this action should be shown as a button rather
                  than as a menu item.

    3) Project statement---------------------------------------------------

    Project
        *Action ...
        *Target wildtyp, maskdef, targname
        Editor editorname
        Browse browsename
        Batch batchname [batchname2]
        Makefile (must match WMAKE rule!)

    Project     - defines the start of the project section in ide.cfg

    Action      - defines an action as described under the *Rule* statement.
                  These actions will appear under the *Actions* menu in
                  the IDE session.

    Target      - defines a target that IDE knows how to make.
    wildtyp     - a wildcard filename (of the form *.xxx), where *xxx*
                  is the extension of a target file.  When a
                  target file is defined during a IDE session, the user
                  selects the type of that target from a list of *Target*
                  types whose *wildtyp* matches the filename of the target
                  specified.
    maskdef     - this is a string of characters (*not* including question
                  marks (?)) that is associated with a target type.  As
                  distributed, ide.cfg uses three characters in the
                  string, where the first represents an operating system
                  platform, the second represents a hardware platform, and
                  the third represents a module type.  The distributed
                  *Tool* and *Rule* masks are set up to reflect this choice.
                  When a user defines a target file, it becomes associated
                  with one of these *Target*s, and therefore has a specific
                  target *maskdef*.  Whenever IDE generates chooses a
                  *Rule*, generates a *Command* line, or processes *Tool*
                  switches, it restricts its choices to those that match
                  the target file *maskdef*.  If a mask character is (?),
                  the corresponding character in the maskdef is said to
                  match; if not, the two characters must match exactly.

    Editor      - specifies a default text editor for the IDE session.
    editorname  - the name of the session text editor.  If the name begins
                  with the character (!), IDE assumes it is an editor
                  that conforms to the WATCOM Editor DDE conventions and
                  treats it as such.

    Browse      - specifies a default program browser for the IDE session.
    browsename  - the name of the session program bropwser.  If the name
                  begins with the character (!), IDE assumes it is a
                  browser that conforms to the WATCOM Program Browser DDE
                  conventions and treats it as such.

    Batch       - specifies the name of the Message Log program that IDE
                  is to use to execute batch makes and other actions.
    batchname   - the actual name of the IDE Log Program that is used
                  under MS Windows, this should be msglog.exe.
    batchname2  - the actual name of the IDE Log Program that is used
                  under Win/OS2, this should be msglog2.exe.

    4) MsgLog statement---------------------------------------------------

    MsgLog
        *Help ext, helpfile
        *Scan pattern

    MsgLog      - defines the start of the message log section of ide.cfg.

    Help        - defines a help file and associates it with a particular
                  file extension.
    ext         - a file extension of the form .c or .cpp 
                  (include the period)
    helpfile    - the name of a help file

    Scan        - defines a scan pattern used by the message log processor
                  to parse filenames, error codes, line and column numbers
                  from the output of the compilers and linkers, etc.
    pattern     - <pattern1> [<pattern2>]
                  When required, IDE scans each successive pattern 
                  statement looking for a pattern that matches the currently
                  selected line in the IDE log window.  A match results in 
                  the extraction of a *filename* and possible a *linenumber*,
                  *offsetnumber*, and/or *errornumber*. These are then used 
                  to invoke the session editor or help manager respectively.

                  A match is found if *pattern1* matches the current line and
                  *pattern2*, if present, matches a previous line, giving a 
                  *filename*. The syntax of a pattern is a simple character
                  string that includes %f to extract a filename, %l to 
                  extract a line number, %o to extract an offset number, %h 
                  to extract an error number, and %* to match any number of 
                  characters.  Patterns must begin and end with the angle
                  brackets (<>).

    -----------------------------------------------------------------------
    The following is a list of the tools described in ide.cfg as
    distributed:

        WCC(386)
        WPP(386)
        WFC(386)
        WASM
        VIW
        WBRW
        WMAKE
        WDV
        WVIDEO
        WLINK
        WLIB
        WRC

        WIMGEDIT
        WRE

        WSPY
        WDDESPY
        WZOOM
        WHEAPWLK

        WDISASM
        WPROF
        WSAMPLE




Appendix C: Setup
-----------------
    1. Setup under OS2/WinOS2.

        To execute IDE under WinOS2, you simply install it as a program
        in the Full Screen WinOS2.  Make sure that all the IDE components are
        accessable via the PATH environment variable for your WinOS2
        sessions.

        Before you can invoke Make and other batch operations, you must
        first have started the program batserv.exe in an OS2 session.
        WATCOM recommends that you start this program as part of your
        OS2/Startup and just leave it running.

    2. Setup under Windows/DOS.

        To execute IDE under MS Windows, you simply install it as a program
        in Program manager. Make sure that all the IDE components are
        accessable via the PATH environment variable DOS box sessions.

        Before you can invoke Make and other batch operations, you must
        have WDEBUG.386 installed as a device in your SYSTEM.INI file.
        If you are using a Novell network, check that you have the correct
        network drivers (>=3.26) in Windows/Setup.

    3. Setup under OS2/PM.
        To execute IDE under OS2/PM, you simply execute it from the OS2
        command line or install it as a program on the desktop.  Make sure 
        that all the IDE components are accessable via the PATH environment
        variable for your OS2 sessions.

        Before you can invoke Make and other batch operations, you must
        first have started the program batserv.exe in an OS2 session.
        WATCOM recommends that you start this program as part of your
        OS2/Startup and just leave it running.


