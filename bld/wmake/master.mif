#
#   The master file for creating wmake.
#
##############################################################################

proj_name   = wmake

!ifndef wmake_autodepends
wmake_autodepends = .AUTODEPEND
!endif

wmake_trmem = 1

# DOS code will not fit in 64k with /d2
#!ifeq host_os dos
#!ifeq host_cpu i86
#wmake_debug = 0
#!endif
#!endif

additional_clean = *.gh *.grc

!include idedlls.mif
!include cproj.mif
!include defrule.mif
!include deftarg.mif
!include wres.mif
!include trmem.mif

!include $(orl_dir)/client.mif

!include ../wmkobjs.mif                     #   get our objs macro

#
# cflags
#
.c : ../c;$(watcom_dir)/c;$(trmem_dir)

inc_dirs = -I. -I"$(wmake_dir)/h" -I"$(orl_dir)/h"

extra_cpp_flags =
!ifdef DLLS_IMPLEMENTED
extra_cpp_flags += -DDLLS_IMPLEMENTED
!endif
!ifdef cachestat
extra_cpp_flags += -DCACHE_STATS
!endif

extra_cpp_flags_memory = $(trmem_cpp_flags)

extra_c_flags_i86 = -zt32

extra_c_flags_memory = $(trmem_cover_cflags)

#
# lflags
#
extra_l_flags = opt statics sort

# large stacks are necessary for !loaddll support
# os2 seems to crash with 128k stack and wccd386 - mjc
extra_l_flags_os2 = opt stack=96k
extra_l_flags_qnx = opt stack=20k
!ifdef LARGE
extra_l_flags_dos_i86 = opt stack=16k
!else ifdef COMPACT
extra_l_flags_dos_i86 = opt stack=16k
!else
extra_l_flags_dos_i86 = opt stack=8k
!endif

!ifeq dos_extender causeway
extra_l_flags_dos_386 = opt stack=16k
!else ifeq dos_extender pharlap
extra_l_flags_dos_386 = opt stack=8k
!else ifeq dos_extender dos4g
extra_l_flags_dos_386 = opt stack=8k
!else
extra_l_flags_dos_386 = opt stack=8k
!endif

# explicit rules
#################

#
# EXE
#
exetarg_prebuild_objs = isarray.gh usage.gh usagej.gh
exetarg_objs          = $(objs)
!ifeq host_cpu i86
exetarg_libs          = $(wres_lib)
!else
exetarg_libs          = $(wres_lib) $(orl_lib)
!endif
exetarg_res_version_nt_386 = exever.res
exetarg_res_version_nt_x64 = exever.res
exetarg_res_wresui    = wresui.res
exetarg_name          = wmk
!include exetarg.mif

#
# rc and others
#
!include verrc.mif

wresui.res : ../h/wmake.rc ../h/mrcmsg.h usage.gh usagej.gh $(__MAKEFILES__)
    @%make echo_rc
    $(rcui8)

usage.gh : ../h/usage.sp $(__MAKEFILES__)
    @%make echo_wsplice
    $(noecho)*wsplice -kENGLISH -f "pick((MSG_USAGE_BASE + %$#%+), \"%s\", \"\")" $[@ $@

usagej.gh : ../h/usage.sp $(__MAKEFILES__)
    @%make echo_wsplice
    $(noecho)*wsplice -kJAPANESE -f "pick((MSG_USAGE_BASE + %$#%+), \"\", \"%s\")" $[@ $@

isarray.gh : ./cretype.exe $(__MAKEFILES__)
    @%make echo_execute
    $(noecho)$[@ $@

./cretype.exe : cretype.c $(__MAKEFILES__)
    @%make echo_bldccl
    $(bld_ccl) $[@ $(bld_cclflags) $(bld_ldflags)

# special targets
##################

# print a list of unreferenced messages
chkmsg :
    sed -f ../msgdef.sed ../h/msg.h | sort -u >chkmsg.1
    *awk -f ../msgref.awk -v OUTFILE=chkmsg.2 chkmsg.1
    sed -f chkmsg.2 ../c/*.c | sort -u >chkmsg.3
    comm -3 chkmsg.1 chkmsg.3 | tee chkmsg
    rm chkmsg.?

strip : .symbolic
    @%make echo_bindres
    $(wstrip) /q $(exetarg_name).exe $(exetarg_name)s.exe >nul
    ls -l *.exe

deps : .symbolic
    cd ../c
    ../support/mmk >../makedeps.mif

do : .symbolic
    wmake -h -n | sed -f ../mkdo.sed >do.bat

test : $(exetarg_name).exe .always .symbolic
curr_dir=$+$(%__CWD__)$-
    cd ../regress
!ifdef __UNIX__
    -./test.sh "$(curr_dir)/$(exetarg_name).exe"
!else
    -test "$(curr_dir)\$(exetarg_name).exe"
!endif
    cd "$(curr_dir)"
