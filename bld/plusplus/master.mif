tree_depth = 4

proj_name = plusplus

plusplus_autodepends = .autodepend

# Important! The C++ compiler modifies string literals
#suppress_zc = 1

# Extra files to delete on clean
additional_clean = *.int y.out ytab.* *.mbr *.gc

!include cproj.mif
!include defrule.mif
!include dllrule.mif
!include dllbase.mif
!include deftarg.mif
!include trmem.mif

!include $(cg_dir)/mif/fe.mif
!include $(cpp_dir)/client.mif
!include asclient.mif

!include ../../ppobjs.mif

#
# names
#
# Base DLL name needs to be 8 chars or less on OS/2, argh! Additionally,
# internal module name may be required to match file name on some platforms.
!ifdef bootstrap
exetarg_name = bwpp
dlltarg_name = bwppd$(target_cpu)
!else
exetarg_name = wpp
dlltarg_name = wppd$(target_cpu)
!endif
!ifneq target_cpu i86
exetarg_name +=$(target_cpu)
!endif
intname     = wpp$(target_cpu)

#
# cflags
#
.c: ../../c;$(asminline_c);$(fe_misc_dir)/c;$(brinfo_dir)/c;$(cpp_c_dirs);$(trmem_dir);$(watcom_dir)/c

inc_dirs = -I. -I.. -I"../../h" $(cg_inc_dirs) $(asminline_inc_dirs) $(cpp_inc_dirs) $(dwarfw_inc_dirs) &
    -I"$(cc_dir)/h" -I"$(comp_cfg_dir)/h" -I"$(fe_misc_dir)/h" -I"$(brinfo_dir)/h"

extra_cpp_flags = -DINCL_MSGTEXT
!ifndef plusplus_dll
extra_cpp_flags += -DIDE_PGM
!endif
!ifeq dll_cg 1
extra_cpp_flags += -D_CGDLL
!endif
extra_cppflags_axp = -DAS_ALPHA
extra_cppflags_mps = -DAS_MIPS
extra_cppflags_ppc = -DAS_PPC
extra_cpp_flags += $(extra_cppflags_$(target_cpu))
!ifeq release 0
extra_cpp_flags += -DAS_DEBUG_DUMP
!endif

!ifdef plusplus_dll
extra_cpp_flags_dos   = -DCAUSEWAY
!endif

extra_cpp_flags_idedrv   = -DSTATIC_LINKAGE
extra_cpp_flags_initfini = -DSPLIT_REQD
extra_cpp_flags_maindrv  = -DDLL_NAME=$(dlltarg_name)
extra_cpp_flags_memmgr = $(trmem_cpp_flags)

#extra_c_flags = -pcl
extra_c_flags =
!ifeq release 0
extra_c_flags += -db
extra_c_flags_axp = -si
!endif

extra_c_flags_carve    = $(incl_file_opts)carvecpp.h
extra_c_flags_cmdlnprs = $(incl_file_opts)fesupp.h
!ifeq release 0
extra_c_flags_dbgzap   = $(incl_file_opts)fesupp.h
!endif
extra_c_flags_floatsup = $(cfloat_inc_dirs)
extra_c_flags_initfini = $(incl_file_opts)fesupp.h
extra_c_flags_intlload = $(incl_file_opts)fesupp.h
extra_c_flags_pstk     = $(incl_file_opts)fesupp.h
extra_c_flags_ringcarv = $(incl_file_opts)fesupp.h
extra_c_flags_ringfns  = $(incl_file_opts)fesupp.h
extra_c_flags_vbuf     = $(incl_file_opts)fesupp.h
extra_c_flags_vstk     = $(incl_file_opts)fesupp.h

!ifdef __WATCOM_TOOLS__
! ifndef bootstrap
!  ifneq host_os linux
!   ifneq host_os osx
# Using -os generates ENTER/LEAVE and Linux is too brain damaged
# to handle ENTER instructions properly. Since GCC doesn't generate
# ENTER, this is supposed to be a "feature".
extra_c_flags_cmdlnany = -os
!   endif
!  endif
extra_c_flags_cscan_386 = -4r
extra_c_flags_cscan    = $(extra_c_flags_cscan_$(host_cpu))
!  ifeq release 1
extra_c_flags_pcheader_386 = -oi
extra_c_flags_pcheader = $(extra_c_flags_pcheader_$(host_cpu))
!  endif
extra_c_flags_srcfile_386 = -4r
extra_c_flags_srcfile  = $(extra_c_flags_srcfile_$(host_cpu))
! endif
!endif
extra_c_flags_memmgr   = $(trmem_cover_cflags)

#
# lflags
#
extra_l_flags_dos = OPTION stack=64k
extra_l_flags_os2 = OPTION stack=128k
extra_l_flags_qnx = OPTION stack=64k, offset=72k, priv=3

extra_l_flags_dll     = option implib $(wpp_dllbase_$(host_os)_$(host_cpu))

extra_l_flags_dll_nt  = initinstance terminstance op modname='$(dlltarg_name).dll'
extra_l_flags_dll_os2 = initinstance terminstance op manyautodata op modname='$(dlltarg_name)'

# explicit rules
#################

#
# EXE
#
prebuild_objs = &
    errmsgs1.gh &
    ic_mask.gh &
    weights.gh &
    keywords.gh &
    yylex.gh &
    cmdlnprs.gh &
    $(asminline_deps) &
    code$(target_cpu).gh &
    $(intname)01.int        # international data files
!ifdef plusplus_dll
exetarg_prebuild_objs = $(dlltarg_name).dll
exetarg_objs          = $(comp_objs_drv)
exetarg_libs_dos      = cwdll.lib
exetarg_libs          = $(dlltarg_name).lib $(exetarg_libs_$(host_os))
!else
exetarg_prebuild_objs = $(prebuild_objs)
exetarg_objs          = $(comp_objs_exe)
exetarg_libs          = $(asminline_lib) $(cg_libs)
!endif
exetarg_res_version_nt_386 = exever.res
exetarg_res_version_nt_x64 = exever.res
exetarg_qnx_res       = usage.u
!include exetarg.mif

#
# DLL
#
dlltarg_prebuild_objs = $(dll_subdir) $(prebuild_objs)
dlltarg_objs          = $(comp_objs_dll)
dlltarg_libs          = $(asminline_lib) $(cg_libs)
dlltarg_res_version_nt_386 = version.res
dlltarg_res_version_nt_x64 = version.res
!include dlltarg.mif

#
# rc and others
#
verrc_dll = $(dlltarg_name)
verrc_exe = $(exetarg_name)
!include verrc.mif

./intlbin.exe: $(fe_misc_dir)/c/intlbin.c
    @%make echo_bldcl
    $(bld_cl) $[@ $(bld_clflags) -I"$(fe_misc_dir)/h" $(bld_ldflags)

$(intname)01.int : ./intlbin.exe errors01.int usage01.int
    $[@ $(intname)

#msgencod_enc_linux = -utf8

errmsgs1.gh errmsgs2.gh errlevel.gh errors01.int : ../../gml/messages.gml
    @%make echo_msgencod
    $(msgencod) -s -i $(msgencod_enc_$(host_os)) ../../gml/messages.gml errmsgs1.gh errmsgs2.gh errlevel.gh .

keywords.gh weights.gh : ../../hash/plusplus.key ../../hash/pc.key
    @%make echo_findhash
    $(noecho)findhash -q -e ",-1" ../../hash/plusplus.key ../../hash/pc.key

./umktable.exe: ../../c/umktable.c xlat.gh
    @%make echo_bldcl
    $(bld_cl) $[@ $(bld_clflags) -I. -I"../../h" $(bld_ldflags)

yylex.gh : ./umktable.exe
    @%make echo_execute
    $(noecho)$[@ $@

./mktrans.exe: ../../c/mktrans.c
    @%make echo_bldcl
    $(bld_cl) $[@ $(bld_clflags) $(bld_ldflags)

xlat.gh : ./mktrans.exe ../../h/ctokens.h keywords.gh ytab.h
    @%make echo_execute
    $(noecho)$[@ $]@ $@

yacc_options = -d -db -dd -df -dt -du -de
# The -dp and -ds switches are v. useful when debugging parser but gen large file!
#yacc_options = -d -db -dd -df -dp -ds -dt -du -de

ytab.c ytab.h : ../../y/plusplus.y ../../c/yydriver.c
    @%make echo_yacc
    $(yacc) $(yacc_options) $[@ $]@ >y.out
# comment out the next line during testing of grammar changes
    diff y.out ../../y/plusplus.chk

# optencod options and targets for various hosts
!ifdef exetarg_qnx_res
optencod_opt_qnx    = -u=$(exetarg_qnx_res)
!endif
#optencod_enc_linux  = -utf8
optencod_targets = $(target_cpu) $(host_os)
!ifeq release 0
optencod_targets += dbg
!endif

cmdlnprs.gh cmdlnprs.gc cmdlnusg.gh usage01.int $(exetarg_qnx_res) : ../../gml/options.gml
    @%make echo_optencod
    $(optencod) -i -n $(optencod_opt_$(host_os)) $(optencod_enc_$(host_os)) $[@ cmdlnprs.gh cmdlnprs.gc cmdlnusg.gh $(optencod_targets)

./icmask.exe : ../../c/icmask.c
    @%make echo_bldcl
    $(bld_cl) $[@ $(bld_clflags) -I"../../h" $(bld_ldflags)

ic_mask.gh : ./icmask.exe ../../h/ic.h ../../c/dwarf.c ../../c/cgbkcgrf.c ../../c/cgio.c ../../c/brmwrite.c
    @%make echo_execute
    $(noecho)*$[@ ../../h/ic.h ../../c/dwarf.c ../../c/cgbkcgrf.c ../../c/cgio.c ../../c/brmwrite.c

!ifeq target_cpu axp

codeaxp.gh :
    echo // Dummy file > $@

!else ifeq target_cpu ppc

codeppc.gh :
    echo // Dummy file > $@

!else ifeq target_cpu mps

codemps.gh :
    echo // Dummy file > $@

!else  # Intel i86 or 386

code$(target_cpu).gh : ./mkcode.exe xcode$(target_cpu).tmp
    @%make echo_execute
    $(noecho)$[@ $]@ $@
!endif

target_as_axp = *bwasmaxp -zq -w8
target_as_i86 = *bwasm -zq -w8-cx
target_as_386 = *bwasm -zq -w8-cx -3
target_as_ppc = *bwasmppc -zq -w8

xcode$(target_cpu).tmp: $(cc_dir)/a/code$(target_cpu).asm
    @%make echo_aslink
    $(noecho)$(target_as_$(target_cpu)) -fo=.obj -I"$(watcom_dir)/h" $[@
    $(noecho)*bwlink system bin op quiet file code$(target_cpu).obj name $@

bld_extra_incs = -I. -I"$(fe_misc_dir)/h" -I"../../h" -I"$(wasm_dir)/h"

./mkcode.exe: mkcode.c
    @%make echo_bldcl
    $(bld_cl) $[@ $(bld_clflags) $(bld_ldflags)
